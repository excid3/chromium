# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# Example of using the render SPU swapbuffer synchronization feature.
# Contributed by Karl Rasche.

import sys
sys.path.append( "../server" )
from mothership import *

demo = sys.argv[1] 

cr = CR()
cr.MTU( 1024*1024*1 )

#------------------------------------------------------
# host setup

app_node_host     = 'head'
rnodes = ['node025', 'node026']
display_nodes = ['node015', 'node016']

display_node_master_url = "tcpip://%s:5000" % display_nodes[0]
print display_node_master_url, len(display_nodes)


display_node_host = []
for node in display_nodes:
	display_node_host.append(node+'-g')


WINDOW_WIDTH = 1024 
WINDOW_HEIGHT= 768

TILES  = 1 
GATHER = 1
SYNC   = 1

LEFTOVER = WINDOW_HEIGHT % TILES


#------------------------------------------------------
# alignment matrix reading

ident_matrix = [1., 0., 0., 0., 1., 0., 0., 0., 1.]

m1     = [0.973562,  0.004415, -0.007529, 
		  0.003261,  0.947712,  1.94458, 
		  0.002599, -0.010123,  1.0]
m1_inv = [1.048508, -0.004702,  0.017041, 
		  0.001944,  1.055210, -2.051925, 
		 -0.002706,  0.010695,  1.0] 

m2     = [0.984898, -0.040043, 1.902047, 
		  0.014376,  0.944815, 1.896261, 
		  0.013537, -0.010616, 0.998804]
m2_inv = [1.046718,  0.000688, -1.979848, 
		 -0.010810,  1.036229, -1.949767, 
		 -0.014414,  0.011044,  0.999229]

align     = [];
align_inv = [];

align.append(m1);
align.append(m2);
align_inv.append(m1_inv);
align_inv.append(m2_inv);


#------------------------------------------------------
# SPU setup

TILE_WIDTH  = WINDOW_WIDTH 
TILE_HEIGHT = WINDOW_HEIGHT/TILES

# setup the tilesort node 
tilesort_spu = SPU('tilesort')
tilesort_spu.Conf('local_tile_spec', 1)
tilesort_spu.Conf('bucket_mode',     'Warped Grid')
if GATHER:
	tilesort_spu.Conf('emit_GATHER_POST_SWAPBUFFERS', 1)

count = 0;
display_num = 0;

for display_node_name in display_node_host:
	tilesort_spu.AddDisplay(display_num, WINDOW_WIDTH, WINDOW_HEIGHT, 
							align[display_num], align_inv[display_num])

	gather_url = "tcpip://%s:%d" % (display_node_name, 3000)

	# setup the display node
	render_spu = SPU('render')
	
	render_spu.Conf('window_geometry', [0, 0, WINDOW_WIDTH, WINDOW_HEIGHT])
	render_spu.Conf('fullscreen', 1)

	if GATHER:
		render_spu.Conf('gather_url', gather_url);
		render_spu.Conf('gather_userbuf_size', WINDOW_WIDTH*WINDOW_HEIGHT*4)
	
	if SYNC:
		render_spu.Conf('swap_master_url', display_node_master_url)
		if display_num == 0:
			render_spu.Conf('is_swap_master', 1)
			render_spu.Conf('num_swap_clients', len(display_nodes)-1)
		else:
 			render_spu.Conf('is_swap_master', 0)

	display_node = CRNetworkNode(display_node_name)
	display_node.Conf("optimize_bucket", 0)
	display_node.Conf("local_tile_spec", 1)
	display_node.Conf("only_swap_once",  1)
	display_node.Conf("only_clear_once", 1)

	display_node.AddSPU(render_spu)
	cr.AddNode(display_node)

	# setup the render nodes 
	for tilenum in range(TILES):
		readback_spu = SPU('readback')
		if tilenum == TILES-1:
			readback_spu.Conf('window_geometry', [0, 0, TILE_WIDTH, TILE_HEIGHT+LEFTOVER])
		else:
			readback_spu.Conf('window_geometry', [0, 0, TILE_WIDTH, TILE_HEIGHT])
		if GATHER:
			readback_spu.Conf('gather_url', gather_url)
			readback_spu.Conf('gather_mtu', 270000)

		pack_spu = SPU('pack')

		render_node = CRNetworkNode(rnodes[count])
		render_node.Conf("bucket_mode", 'Warped Grid')

		render_node.Conf("local_tile_spec", 1)
		render_node.Conf("only_swap_once", 1)
		render_node.Conf("only_clear_once", 1)

		if tilenum == TILES-1:
			render_node.AddTileToDisplay(display_num, 0, tilenum*TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT+LEFTOVER)
		else:
			render_node.AddTileToDisplay(display_num, 0, tilenum*TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT)
		render_node.AddSPU(readback_spu)
		render_node.AddSPU(pack_spu)
		pack_spu.AddServer(display_node, 'tcpip', port=7000+display_num)
		tilesort_spu.AddServer(render_node, protocol='tcpip', port=8000+count)
		cr.AddNode(render_node)
		count = count+1

	display_num = display_num + 1

print '%d render nodes' % count
# setup the app node 
app_node = CRApplicationNode(app_node_host)
app_node.StartDir( crbindir )
app_node.SetApplication( os.path.join(crbindir,demo))
app_node.AddSPU(tilesort_spu)
cr.AddNode(app_node)

cr.Go()
