# This configuration file instructs Chromium to load a render spu on the
# application node and has it render into the original application's
# window.  This lets Chromium basically do a NOOP, merely passing every
# OpenGL call to the system's library for rendering into the app window.
#
# One might ask "why?"  Good question.  This can be very useful in
# conjuction with DMX.  Specifying this config in one's ~/.crconfigs file
# lets you "bypass" Chromium when needed.  Some applications (like
# blockbuster.sourceforge.net) need this to operate properly in a DMX
# environment.

import sys, os
sys.path.append("../server" )
from mothership import *

mothershipPort = int(sys.argv[1])
program = sys.argv[2]

cr = CR()
cr.MTU( 10*1024*1024 )

clientnode = CRApplicationNode( )
clientnode.SetApplication( program )
#clientnode.Conf('track_window_size', 1)
#clientnode.Conf('track_window_position', 1)

renderspu = SPU( 'render' )
renderspu.Conf('display_string', os.environ["DISPLAY"])
renderspu.Conf('render_to_app_window', 1)

# If we don't have a DISPLAY environment variable, assume that we're going
# to talk to localhost on head 0.  Might not be true, but it's better than
# erroring out all the time with a NULL display.
if (not "DISPLAY" in os.environ):
    renderspu.Conf('display_string', "localhost:0")

clientnode.AddSPU( renderspu )

cr.AddNode( clientnode )
cr.Go( mothershipPort )
