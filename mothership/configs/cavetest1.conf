# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# Demo of running the city demo in a 4-wall CAVE-like environment.
# We have four render servers, each shows one of the four walls.
# We use the 'view_matrix' and 'projection_matrix' server config
# options to override the application's viewing and projection transformations.


import sys
sys.path.append( "../server" )
from mothership import *
from crmatrix import *


if len(sys.argv) > 1:
	demo = sys.argv[1]
else:
	demo = "city"

cr = CR()
cr.MTU( 1024*1024 )


titles = [ '-Z view', '+X view', '+Z view', '-X view' ]
WALLS = 4
WALL_WIDTH = 300
WALL_HEIGHT = 300
APP_MATRICES = 0    # Are the view-specific matrices specified in the app?

xTranslate = 0
yTranslate = 0
zTranslate = 0

if demo[0:4] == "city":
	fScale = 0.5
	farPlane = 80.0
	zTranslate = 0.0
	demo += " -b 20"         # fewer buildings
	demo += " -v %d" % WALLS # specify number of views
	demo += " -c"            # enable cave mode
	APP_MATRICES = 1           # city demo will specify frustums
elif demo == "atlantis":
	fScale = 1.0          # view frustum scale/shape (and near clip plane)
	farPlane = 60000.0    # atlantis uses big coordinates!
	zTranslate = 80000.0  # put us in the middle of the fish
	demo += " -s 20"      # more sharks!
elif demo == "gltron":
	# you'll probably have to tune this
	fScale = 0.5
	farPlane = 800.0
	zTranslate = 0.0
else:
	# you'll probably have to tune this
	fScale = 0.5
	farPlane = 100.0
	yTranslate = -5.0
	zTranslate = 50.0



tilesortspu = SPU( 'tilesort' )
# Do bucketing by testing bounding boxes against viewing frustums
tilesortspu.Conf('bucket_mode', 'Frustum')#'Broadcast')

clientnode = CRApplicationNode( )
clientnode.StartDir( crbindir )
clientnode.SetApplication( demo )
clientnode.AddSPU( tilesortspu )

# create the four walls
for wall in range(WALLS):
	# Render SPU w/ geometry
	renderspu = SPU( 'render' )
	renderspu.Conf( 'window_geometry',
					[wall*(WALL_WIDTH+10), 0, WALL_WIDTH, WALL_HEIGHT] )
	renderspu.Conf( 'title', titles[wall] )

	node = CRNetworkNode( )
	node.Conf('optimize_bucket', 0)
	node.AddTile( 0, 0, WALL_WIDTH, WALL_HEIGHT )

	# Each view is another 90 degree rotation about the Y axis
	if not APP_MATRICES:
		v = CRMatrix()
		v.YRotate(90 * wall)
		v.Translate(xTranslate, yTranslate, zTranslate)
		#v.Translate(0, -5, 0)
		#v.XRotate(-20)
		node.Conf('view_matrix', v.ToList())

	# Set projection matrix centered at (0,0,0) projecting through
	# a side of the cube.
	if not APP_MATRICES:
		p = CRMatrix()
		p.Frustum( -fScale, fScale, -fScale, fScale, fScale, farPlane )
		node.Conf('projection_matrix', p.ToList())

	node.AddSPU( renderspu )
	cr.AddNode( node )

	tilesortspu.AddServer( node, protocol='tcpip', port=7000 + wall )


cr.AddNode( clientnode )

cr.Go()
