# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# Demonstrate parallel submission with sort-last rendering.

import sys
sys.path.append( "../server" )
from mothership import *

Demo = 'psubmit'

Demo = os.path.join(crbindir, Demo)

# Can render/readback windows by dynamically resized?
resizable = '1'

uncompress_spu = SPU( 'zpix' )
#uncompress_spu.Conf( 'no_diff', 1 )

# Set up the server node
servernode1 = CRNetworkNode( )
servernode1.Conf( 'only_swap_once', 1 )
renderspu = SPU( 'render' )
renderspu.Conf( 'window_geometry', [500, 500, 400, 400] )
renderspu.Conf('resizable', resizable)
# only specifying visual to work-around ATI FireGL problem
renderspu.Conf('default_visual', 'rgb, double, depth, stencil')
uncompress_spu = SPU( 'zpix' )
#uncompress_spu.Conf( 'no_diff', 1 )
servernode1.AddSPU( uncompress_spu )
servernode1.AddSPU( renderspu )

# Set up first app/client node
appnode1 = CRApplicationNode(  )
appnode1.SetApplication( '%s -rank 0 -size 2 -clear' % Demo )
appnode1.StartDir( crbindir )
spu = SPU('readback')
spu.Conf('window_geometry', [0, 0, 400, 400])
spu.Conf('extract_depth', '1')
spu.Conf('resizable', resizable)
# only specifying visual to work-around ATI FireGL problem
spu.Conf('default_visual', 'rgb, double, depth')
appnode1.AddSPU( spu )
compress_spu = SPU( 'zpix' )
compress_spu.Conf( 'ztype', 'Zlib' )
compress_spu.Conf( 'ztype_parm', 9 )
compress_spu.Conf( 'client_id', 1 )
appnode1.AddSPU( compress_spu )
spu = SPU('pack')
appnode1.AddSPU( spu )
spu.AddServer( servernode1, 'tcpip' )

# Set up second app/client node
appnode2 = CRApplicationNode( )
appnode2.SetApplication( '%s -rank 1 -size 2 -clear' % Demo )
appnode2.StartDir( crbindir )
spu = SPU('readback')
spu.Conf('window_geometry', [420, 0, 400, 400])
spu.Conf('extract_depth', '1')
spu.Conf('resizable', resizable)
# only specifying visual to work-around ATI FireGL problem
spu.Conf('default_visual', 'rgb, double, depth')
appnode2.AddSPU( spu )
compress_spu = SPU( 'zpix' )
compress_spu.Conf( 'ztype', 'Zlib' )
compress_spu.Conf( 'ztype_parm', 9 )
compress_spu.Conf( 'client_id', 2 )
appnode2.AddSPU( compress_spu )
spu = SPU('pack')
appnode2.AddSPU( spu )
spu.AddServer( servernode1, 'tcpip' )

cr = CR()
cr.MTU( 10*1024*1024 )
cr.AddNode( servernode1 )
cr.AddNode( appnode1 )
cr.AddNode( appnode2 )
cr.Go()
