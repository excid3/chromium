# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# Demonstrate the threadtest program.  Chromium must be built with
# 'make threadsafe' in order for these to work!!!!  Otherwise, Cr will
# die, reporting a deadlock.


import sys
sys.path.append( "../server" )
from mothership import *

# Name of the program:
Demo = 'threadtest'

# Number of threads:
NumThreads = 3

# We support 4 rendering configs (local configs don't need a crserver):
LOCAL_ONE_WINDOW = 1
LOCAL_N_WINDOWS = 2
REMOTE_ONE_WINDOW = 3
SORT_LAST = 4

# Set Config equal to one of the above constants:
Config = LOCAL_ONE_WINDOW



renderspu = SPU( 'render' )
renderspu.Conf( 'window_geometry', [500, 500, 400, 400] )

if (Config == SORT_LAST):
	readbackspu = SPU('readback')
	readbackspu.Conf('extract_depth', '1')
	readbackspu.Conf('extract_alpha', '0')
	readbackspu.Conf('window_geometry', [0, 0, 400, 400])
	readbackspu.Conf('visualize_depth', '0')

packspu = SPU('pack')

if (Config == REMOTE_ONE_WINDOW or Config == SORT_LAST):
	rendernode = CRNetworkNode( )
	if Config == SORT_LAST:
		rendernode.Conf('only_swap_once', 1)
	rendernode.AddSPU( renderspu )
else:
	rendernode = 0

appnode = CRApplicationNode( )
Demo = os.path.join(crbindir, Demo)

# See the threadtest.c sources for the meaning of these flags:
if Config == LOCAL_ONE_WINDOW:
	appnode.SetApplication( '%s -t %d -b -s1' % (Demo, NumThreads) )
elif Config == LOCAL_N_WINDOWS:
	appnode.SetApplication( '%s -t %d -w -b' % (Demo, NumThreads) )
elif Config == REMOTE_ONE_WINDOW:
	appnode.SetApplication( '%s -t %d -b -s1' % (Demo, NumThreads) )
elif Config == SORT_LAST:
	appnode.SetApplication( '%s -t %d -w' % (Demo, NumThreads) )
else:
	print "Invalid Config value: %d" % Config
	exit

appnode.StartDir( crbindir )

if (Config == LOCAL_ONE_WINDOW or Config == LOCAL_N_WINDOWS):
	appnode.AddSPU( renderspu )
else:
	if (Config == SORT_LAST):
		appnode.AddSPU( readbackspu )
	appnode.AddSPU( packspu )
	packspu.AddServer( rendernode, 'tcpip' )


cr = CR()
cr.MTU( 200*1024 );
if (rendernode != 0):
	cr.AddNode( rendernode )
cr.AddNode( appnode )
cr.Go()
