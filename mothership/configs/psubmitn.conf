# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

import sys
sys.path.append( "../server" )
from mothership import *
from getopt import getopt

demo = 'psubmit'

# Set this var to one if you want to do sort-last Z compositing with the
# readback SPU.
ZComp = 0

opts, args = getopt(sys.argv[1:], "z")
sys.argv[1:] = args

for opt, arg in opts:
    if opt == "-z":
        ZComp = 1

if (len(sys.argv) < 2) or (len(sys.argv) > 3):
    print "Usage: %s [-z] num_clients [spu]" % sys.argv[0] 
    print
    print "    -z   Do sort-last Z compositing with the readback SPU"
    print "   spu   Use the specified client SPU. Default: pack"
    print
    sys.exit(-1)

# This is the number of submitters/clients.  Start that number of crappfakers.
NumClients = int(sys.argv[1])

if len(sys.argv) == 3:
    clientspuname = sys.argv[2]
else:
    clientspuname = 'pack'

renderspu = SPU( 'render' )

clientspu = {}
clientspuZ = {}
node = {}

for i in range(NumClients):
    if (ZComp):
        clientspuZ[i] = SPU('readback')
        clientspuZ[i].Conf('extract_depth', '1')

    clientspu[i] = SPU( clientspuname )

#clientspu1.Conf( 'draw_bbox', 1 )
#clientspu1.Conf( 'bbox_line_width', 2 )
#clientspu2.Conf( 'draw_bbox', 1 )
#clientspu2.Conf( 'bbox_line_width', 2 )

#serverprintspu = SPU( 'print' )
#serverprintspu.Conf( 'log_file', '/tmp/%s_SERVER_LOG' % demo )

node1 = CRNetworkNode( )
#node1.AddSPU( serverprintspu )
node1.AddSPU( renderspu )

renderspu.Conf( 'window_geometry', [500, 500, 500, 500] )
if (clientspuname == 'tilesort' ):
    node1.AddTile( 0, 0, 500, 500 )

for i in range(NumClients):
    node[i] = CRApplicationNode( )
    node[i].SetApplication( '%s -rank %d -size %d' % (os.path.join(crbindir, demo), i, NumClients) )
    node[i].StartDir( crbindir )
    if (ZComp):
        node[i].AddSPU( clientspuZ[i] )
    node[i].AddSPU( clientspu[i] )
    clientspu[i].AddServer( node1, 'tcpip' )


cr = CR()
cr.MTU( 16*1024 )
cr.AddNode( node1 )
for i in range(NumClients):
    cr.AddNode( node[i] )
cr.Go()
