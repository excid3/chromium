# Example of a two-tiered tilesort configuration.
# The first level tilesort SPU has two servers: one is just a render SPU
# and the other is the second tilesort SPU.
# The second-level tilesort SPU has two ordinary render servers.

# Initial Chromium configuration produced by configtool.py

# Note: the crserver's warnings about "No room for XxY tile" can be ignored.

# Brian Paul
# 22 March 2004


# Tweakable parameters:
TileWidth = 320
TileHeight = 600
SmallTile = 300  # arbitrary
RenderToAppWindow = 1


import string
import sys
sys.path.append( "../server" )
from mothership import *

MOTHERSHIP_OPTIONS = [
	("MTU", 1048576),
	("auto_start", 0),
	("auto_start_apps", 0),
	("autostart_branches", 0),
	("autostart_max_nodes_per_thread", 1),
]
DEFAULT_APP = "city"

AUTO_START_SERVERS = 0
AUTO_START_APPS = 0

# Look for autostart option
for (name, value) in MOTHERSHIP_OPTIONS:
	if name == "auto_start":
		AUTO_START_SERVERS = value
	elif name == "auto_start_apps":
		AUTO_START_APPS = value

# Get program name
if len(sys.argv) == 1:
	pass
elif len(sys.argv) == 2:
	DEFAULT_APP = sys.argv[1]
else:
	print "Usage: %s <program>" % sys.argv[0] 
	sys.exit(-1)
if DEFAULT_APP == "":
	print "No program to run!"
	sys.exit(-1)


def LayoutTilesFirst(muralWidth, muralHeight):
	"""Compute tile layout for the first-tier tilesort SPU.
	Return list of tuples of (serverIndex, x, y, width, height)."""
	tiles = []
	tiles.append( (0, 0, 0, muralWidth, muralHeight) )
	tiles.append( (1, 0, 0, muralWidth, muralHeight) )
	return tiles


def LayoutTilesSecond(muralWidth, muralHeight):
	"""Compute tile layout for the second-tier tilesort SPU.
	Return list of tuples of (serverIndex, x, y, width, height)."""
	tiles = []
	tiles.append( (0, 0, 0, TileWidth, TileHeight) )
	tiles.append( (1, TileWidth, 0, TileWidth, TileHeight) )
	return tiles



cr = CR()

nodes = range(5)

nodes[0] = CRApplicationNode('localhost')
nodes[0].Conf("application", DEFAULT_APP)
nodes[0].Conf("start_dir", crbindir)
nodes[0].Conf("track_window_size", 1)
nodes[0].SetPosition(30, 75)
cr.AddNode(nodes[0])
if AUTO_START_APPS:
	nodes[0].AutoStart( [ "/bin/sh", "-c", "LD_LIBRARY_PATH=%s MOTHERSHIP=localhost %s/crappfaker" % (crlibdir, crbindir) ] )

nodes[1] = CRNetworkNode('localhost')
nodes[1].SetPosition(236, 132)
cr.AddNode(nodes[1])
if AUTO_START_SERVERS:
	nodes[1].AutoStart( [ "/bin/sh", "-c", "LD_LIBRARY_PATH=%s MOTHERSHIP=localhost %s/crserver" % (crlibdir, crbindir) ] )

nodes[2] = CRNetworkNode('localhost')
nodes[2].SetPosition(231, 64)
cr.AddNode(nodes[2])
if AUTO_START_SERVERS:
	nodes[2].AutoStart( [ "/bin/sh", "-c", "LD_LIBRARY_PATH=%s MOTHERSHIP=localhost %s/crserver" % (crlibdir, crbindir) ] )

nodes[3] = CRNetworkNode('localhost')
nodes[3].SetPosition(461, 38)
cr.AddNode(nodes[3])
if AUTO_START_SERVERS:
	nodes[3].AutoStart( [ "/bin/sh", "-c", "LD_LIBRARY_PATH=%s MOTHERSHIP=localhost %s/crserver" % (crlibdir, crbindir) ] )

nodes[4] = CRNetworkNode('localhost')
nodes[4].SetPosition(461, 103)
cr.AddNode(nodes[4])
if AUTO_START_SERVERS:
	nodes[4].AutoStart( [ "/bin/sh", "-c", "LD_LIBRARY_PATH=%s MOTHERSHIP=localhost %s/crserver" % (crlibdir, crbindir) ] )


# application nodes[0]
spus = range(1)
spus[0] = SPU('tilesort')
spus[0].AddServer(nodes[1], protocol='tcpip', port=7000)
spus[0].AddServer(nodes[2], protocol='tcpip', port=7001)
spus[0].TileLayoutFunction( LayoutTilesFirst )
nodes[0].AddSPU(spus[0])

# network nodes[1]
spus = range(1)
spus[0] = SPU('render')
spus[0].Conf("window_geometry", [600, 0, SmallTile, SmallTile])
spus[0].Conf("render_to_app_window", RenderToAppWindow)
nodes[1].AddSPU(spus[0])
nodes[1].AddTile(0, 0, SmallTile, SmallTile)

# network nodes[2]
spus = range(1)
spus[0] = SPU('tilesort')
spus[0].Conf("fake_window_dims", [SmallTile, SmallTile])
spus[0].AddServer(nodes[3], protocol='tcpip', port=7002)
spus[0].AddServer(nodes[4], protocol='tcpip', port=7003)
spus[0].TileLayoutFunction( LayoutTilesSecond )
nodes[2].AddSPU(spus[0])
nodes[2].AddTile(0, 0, SmallTile, SmallTile)

# network nodes[3]
spus = range(1)
spus[0] = SPU('render')
spus[0].Conf("title", "Render SPU (tile 1)")
spus[0].Conf("window_geometry", [0, 0, TileWidth, TileHeight])
nodes[3].AddSPU(spus[0])
nodes[3].AddTile(0, 0, TileWidth, TileHeight)

# network nodes[4]
spus = range(1)
spus[0] = SPU('render')
spus[0].Conf("title", "Render SPU (tile 2)")
spus[0].Conf("window_geometry", [TileWidth+10, 0, TileWidth, TileHeight])
nodes[4].AddSPU(spus[0])
nodes[4].AddTile(TileWidth, 0, TileWidth, TileHeight)



# Set mothership params
for (name, value) in MOTHERSHIP_OPTIONS:
	cr.Conf(name, value)
cr.Go()
