# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# Demonstrate parallel submission with sort-last rendering.


# OPTIONS

# Initial window size
Width = 400
Height = 400

# Can render/readback windows by dynamically resized?
Resizable = 1

# Number of app/client nodes (amount of parallelism)
N = 2

Servers = [ "localhost" ]
Clients = [ "localhost", "localhost", "localhost", "localhost" ]

# Test bounding boxes?
BBox = 0

# Use PBuffers?
PBuffers = 0


######################################################################

import sys
sys.path.append( "../server" )
from mothership import *

if len(sys.argv) > 1:
	Demo = sys.argv[1]
	firstExtra = 2
else:
	Demo = 'psubmit'
	firstExtra = 1
	
# Collect remaining command line params as program options
ExtraOpts = ""
for arg in sys.argv[firstExtra:]:
	ExtraOpts += arg + " "

Demo = os.path.join(crbindir, Demo)


# Set up the server node
servernode1 = CRNetworkNode(Servers[0])
# Note: there are two ways to handle SwapBuffers:
# 1. Set server's only_swap_once flag and have all clients do Swap (-swap).
# 2. Don't set only_swap_once and have exactly one client do a real SwapBuffers
servernode1.Conf( 'only_swap_once', 1 )
servernode1.Conf( 'shared_windows', 1 )
renderspu = SPU( 'render' )
renderspu.Conf( 'window_geometry', [500, 500, Width, Height] )
renderspu.Conf('resizable', Resizable)
# only specifying visual to work-around ATI FireGL problem
renderspu.Conf('default_visual', 'rgb, double, depth, stencil')
servernode1.AddSPU( renderspu )

cr = CR()
cr.MTU( 10*1024*1024 )
cr.AddNode( servernode1 )

# Set up the app/client nodes
for rank in range(N):
	appnode = CRApplicationNode(Clients[rank])
	app = '%s -rank %d -size %d -clear -swap %s' % (Demo, rank, N, ExtraOpts)
	if BBox:
		app += ' -bbox'
	if PBuffers:
		app += ' -pbuffer'
	appnode.SetApplication( app )
	appnode.StartDir( crbindir )
	spu = SPU('readback')
	if rank > 0 and Clients[rank] != Clients[rank - 1]:
		x = 0
	else:
		x = (Width + 10) * rank
	spu.Conf('window_geometry', [x, 0, Width, Height])
	spu.Conf('extract_depth', 1)
	spu.Conf('resizable', Resizable)
	# only specifying visual to work-around ATI FireGL problem
	spu.Conf('default_visual', 'rgb, double, depth')
	appnode.AddSPU( spu )
	spu = SPU('pack')
	appnode.AddSPU( spu )
	spu.AddServer( servernode1, 'tcpip' )
	cr.AddNode( appnode )

cr.Go()
