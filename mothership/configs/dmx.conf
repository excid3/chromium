# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# This configuration file is an example of what would be used to run
# Chromium on a DMX systems.

import sys
sys.path.append( "../server" )
from mothership import *

if len(sys.argv) > 1:
	demo = sys.argv[1]
else:
	demo = 'atlantis'

cr = CR()
cr.MTU( 10*1024*1024 )

# Fix these:
TILE_COLS = 2
TILE_ROWS = 1
HOSTS = ['cr1', 'cr2']


# These values don't really matter!
TILE_WIDTH = 550
TILE_HEIGHT = 550

tilesortspu = SPU('tilesort')
tilesortspu.Conf('use_dmx', 1)
tilesortspu.Conf('retile_on_resize', 1)  # the default
tilesortspu.Conf('bucket_mode', 'Non-Uniform Grid')
tilesortspu.Conf('draw_bbox', 0)
tilesortspu.Conf('scale_images', 0)

clientnode = CRApplicationNode( )
clientnode.StartDir( crbindir )
clientnode.SetApplication( demo )
clientnode.AddSPU( tilesortspu )
clientnode.Conf('track_window_size', 1)
clientnode.Conf('track_window_position', 1)

for row in range(TILE_ROWS):
	for col in range(TILE_COLS):
		n = row * TILE_COLS + col

		renderspu = SPU( 'render' )
		renderspu.Conf('display_string', HOSTS[n] + ":0")
		renderspu.Conf('render_to_app_window', 1)
		renderspu.Conf( 'window_geometry', [1.1*col*TILE_WIDTH, 1.1*row*TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT] )

		servernode = CRNetworkNode( HOSTS[n] )
		servernode.AddTile( col*TILE_WIDTH, (TILE_ROWS-row-1)*TILE_HEIGHT, TILE_WIDTH, TILE_HEIGHT )

		servernode.AddSPU( renderspu )
		# optimize_bucket is of no use w/ DMX.
		servernode.Conf('optimize_bucket', 0)
		servernode.Conf('use_dmx', 1)
		cr.AddNode( servernode )

		tilesortspu.AddServer( servernode, protocol='tcpip', port=7000 + n )


cr.AddNode( clientnode )
cr.Go()
