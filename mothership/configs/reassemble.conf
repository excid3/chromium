# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# This is an example of tilesort-reassembly into an application window.
#
# The app node has a tilesort SPU that connect to two servers.
# Each server has two tiles (four total).
# A readback SPU runs on each server.
# The readback SPUs send two tiles each to the render SPU.
# The render SPU uses render_to_app_window to render into the original
# application window.  The render SPU window is never displayed.

# Brian Paul  16 July 2002


# WARNING! WARNING! WARNING! WARNING!
#
# If you enable both 'extract_alpha' and RENDER_BACK you'll probably crash
# your X server if using the NVIDIA 2960 drivers.  This is probably because
# the render SPU GLX context has different visual attributes (an alpha channel)
# that the original app window lacks.  This mismatch shouldn't cause a crash
# but it does.   (Brian - 20 August 2002)
#



import sys
sys.path.append( "../server" )
from mothership import *

if len(sys.argv) < 2:
		demo = "atlantis"
else:
		demo = sys.argv[1]

# Server(s) base hostname.  If your cluster has hosts named cr1, cr2, cr3,
# etc. you'd set ServerHost = 'cr'.  If you leave ServerHost as '' then
# all nodes will be on your local host.
ServerHost = ''

cr = CR()
cr.MTU( 1024*1024 )  # may need larger value for big windows

TILE_COLS = 2  # don't change these unless you overhaul LayoutTiles()
TILE_ROWS = 2

MAX_TILE_WIDTH = 300
MAX_TILE_HEIGHT = 300

NUM_SERVERS = 2  # don't change these unless you overhaul LayoutTiles()

SLOP = 30  # window border

REASSEMBLE = 1   # use readback SPUs and downstream render SPU
RENDER_BACK = 1  # render back into app window
RESIZABLE = 1    # track client window size changes


# This is a callback which we register with spu.TileLayoutFunction()
def LayoutTiles(muralWidth, muralHeight):
	"""Return list of tuples of new tiles for the given mural size.
	Each tuple is of the form (serverIndex, x, y, width, height)."""

	if muralWidth > MAX_TILE_WIDTH * TILE_COLS:
			print "Warning: mural size is too wide!"
			muralWidth = MAX_TILE_WIDTH * TILE_COLS
	if muralHeight > MAX_TILE_HEIGHT * TILE_ROWS:
			print "Warning: mural size is too tall!"
			muralHeight = MAX_TILE_HEIGHT * TILE_ROWS

	# four tiles
	w = muralWidth / 2
	h = muralHeight / 2
	t0 = (0, 0, 0, w, h) # lower-left
	t1 = (1, w, 0, muralWidth - w, h) # lower-right
	t2 = (1, 0, h, w, muralHeight - h) # upper-left
	t3 = (0, w, h, muralWidth - w, muralHeight - h) # upper-right

	tiles = []
	tiles.append(t0)
	tiles.append(t1)
	tiles.append(t2)
	tiles.append(t3)
	return tiles


# The application node (tilesort SPU)
tilesortspu = SPU( 'tilesort' )
tilesortspu.TileLayoutFunction( LayoutTiles )
#tilesortspu.Conf('broadcast', '1')
tilesortspu.Conf('bucket_mode', 'Non-Uniform Grid')

client_node = CRApplicationNode( )
client_node.StartDir( crbindir )
client_node.SetApplication( demo )
client_node.AddSPU( tilesortspu )
client_node.Conf('track_window_size', RESIZABLE)

cr.AddNode( client_node )


# Final reassembly node (render SPU)
if REASSEMBLE:
	render_node = CRNetworkNode()
	render_node.Conf('shared_windows', 1)
	renderspu = SPU('render')
	renderspu.Conf( 'window_geometry',
		 [850, 0, TILE_COLS * MAX_TILE_WIDTH, TILE_ROWS * MAX_TILE_HEIGHT] )
	renderspu.Conf('render_to_app_window', RENDER_BACK)
	renderspu.Conf('resizable', RESIZABLE)
	render_node.Conf('only_swap_once', 1)
	render_node.AddSPU(renderspu)

	cr.AddNode( render_node )


# create server nodes
serverNodes = range(NUM_SERVERS)
for i in range(NUM_SERVERS):
	if ServerHost == '':
		serverNodes[i] = CRNetworkNode( )
	else:
		serverNodes[i] = CRNetworkNode( ServerHost + str(i + 1) )
	if REASSEMBLE:
		readbackspu = SPU( 'readback' )
		readbackspu.Conf( 'window_geometry',
						  [0, i * (MAX_TILE_HEIGHT + SLOP),
						  2 * MAX_TILE_WIDTH, MAX_TILE_HEIGHT] )
		readbackspu.Conf('extract_alpha', 0)
		readbackspu.Conf('extract_depth', 0)
		readbackspu.Conf('title', 'readback SPU %d' % i)
		serverNodes[i].AddSPU( readbackspu )

		packspu = SPU('pack')
		serverNodes[i].AddSPU(packspu)

		packspu.AddServer( render_node, protocol='tcpip' )
	else:
		renderspu = SPU( 'render' )
		renderspu.Conf( 'window_geometry',
						  [0, i * (MAX_TILE_HEIGHT + SLOP),
						  2 * MAX_TILE_WIDTH, MAX_TILE_HEIGHT] )
		serverNodes[i].AddSPU( renderspu )
	tilesortspu.AddServer( serverNodes[i], protocol='tcpip', port=7001 + i )
	serverNodes[i].Conf('optimize_bucket', '0')
	cr.AddNode( serverNodes[i] )



# setup tiling
for row in range(TILE_ROWS):
	for col in range(TILE_COLS):
		index = row * TILE_COLS + col
		srv = index % NUM_SERVERS
		node = serverNodes[srv]
		node.AddTile( col * MAX_TILE_WIDTH,
									(TILE_ROWS - row - 1) * MAX_TILE_HEIGHT,
									MAX_TILE_WIDTH, MAX_TILE_HEIGHT )


cr.Go()
