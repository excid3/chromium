#
# Example of dynamic tile layout.
# This script was originally generated by the graphical config tool's
# tilesort template, then hacked a bit for dynamic tiling.
#
# Highlights:
# 1. The 'track_window_size' option is set.  This makes the crfaker library
#    look for window resize events.  In response, the head SPU's crWindowSize()
#    function is called.
#
# 2. The tilesort SPU's crWindowSize() function contacts the mothership
#    and asks for a new tile layout.  This is done via the LayoutTiles()
#    function seen below.  This is a callback function which is registered
#    with tilesortspu.TileLayoutFunction( LayoutTiles ).
#
# 3. LayoutTiles() creates a new list of tiles and returns them as a list.
#    The Tilesort SPU receives this list and reconfigures its internal
#    data structures.  The new tile info is then forwarded to the cr servers.
#
# 4. The optimize_bucket option must be disabled (for now).
#
# 5. The default demo program is atlantis.  Since it's mostly just a blue
#    background with a few fish, it can be hard to see what's going on.
#    But if you resize the atlantis window you'll see the tile size/positions
#    change in the render SPU windows.
#
# 6. Dynamic retiling is intended for image-composition applications, such
#    as with Lightning-2, moreso than big mural displays.
#
# Brian Paul
# 28 June 2002
#

TILE_ROWS = 1
TILE_COLS = 2
TILE_WIDTH = 256
TILE_HEIGHT = 256
RIGHT_TO_LEFT = 0
BOTTOM_TO_TOP = 0
SERVER_HOSTS = ['localhost', 'localhost', 'localhost', 'localhost']
SERVER_PATTERN = ('localhost', 1)
NUM_APP_NODES = 1
TILESORT_split_begin_end = 1
TILESORT_sync_on_swap = 1
TILESORT_sync_on_finish = 1
TILESORT_draw_bbox = 0
TILESORT_bbox_line_width = 3
TILESORT_fake_window_dims = [1, 1]
TILESORT_scale_to_mural_size = 1
RENDER_try_direct = 1
RENDER_force_direct = 0
RENDER_fullscreen = 0
RENDER_on_top = 0
RENDER_title = "Chromium Render SPU"
RENDER_window_geometry = [0, 0, 768, 768]
RENDER_system_gl_path = ""
RENDER_render_to_app_window = 0
RENDER_resizable = 1
SERVER_optimize_bucket = 0
SERVER_lighting2 = 0
SERVER_only_swap_once = 0
GLOBAL_MTU = 1048576
GLOBAL_auto_start = 0
GLOBAL_default_app = "atlantis"
GLOBAL_zeroth_arg = ""
CLIENT_track_window_size = 1
# end of options, the rest is boilerplate

import string, sys
sys.path.append( "../server" )
from mothership import *

GLOBAL_default_dir = crbindir

# This is a callback which we register with spu.TileLayoutFunction()
def LayoutTiles(muralWidth, muralHeight):
	"""Return list of tuples of new tiles for the given mural size.
	Each tuple is of the form (serverIndex, x, y, width, height)."""

	numServers = 2
	desiredTileRows = 2
	desiredTileColumns = 2

	tiles = []

	# compute approximate tile size
	tileWidth = muralWidth / desiredTileColumns
	tileHeight = muralHeight / desiredTileRows

	# Use simple raster-order layout.
	k = 0;
	for i in range(desiredTileRows-1, -1, -1):  # reverse order
		if i == desiredTileRows - 1:
			# the last, odd-sized tile row
			h = muralHeight - (desiredTileRows - 1) * tileHeight
		else:
			h = tileHeight
		y = i * tileHeight
		for j in range(desiredTileColumns):
			if j == desiredTileColumns - 1:
				# the last, odd-sized tile column
				w = muralWidth - (desiredTileColumns - 1) * tileWidth
			else:
				w = tileWidth
			x = j * tileWidth

			srv = k % numServers

			# save the tile
			tiles.append( (srv, x, y, w, h) )
			k += 1

	return tiles 


# Check for program name/args on command line
if len(sys.argv) == 1:
	program = GLOBAL_default_app
else:
	program = string.join(sys.argv[1:])
if program == "":
	print "No program to run!"
	sys.exit(-1)

# Determine if tiles are on one server or many
if (len(SERVER_HOSTS) >= 2) and (SERVER_HOSTS[0] != SERVER_HOSTS[1]):
	singleServer = 0
else:
	singleServer = 1

localHostname = os.uname()[1]

cr = CR()
cr.MTU( GLOBAL_MTU )


tilesortSPUs = []
clientNodes = []

for i in range(NUM_APP_NODES):
	tilesortspu = SPU('tilesort')
	tilesortspu.Conf('bucket_mode', 'Non-Uniform Grid')
	tilesortspu.Conf('sync_on_swap', TILESORT_sync_on_swap)
	tilesortspu.Conf('sync_on_finish', TILESORT_sync_on_finish)
	tilesortspu.Conf('draw_bbox', TILESORT_draw_bbox)
	tilesortspu.Conf('bbox_line_width', TILESORT_bbox_line_width)
	#tilesortspu.Conf('fake_window_dims', fixme)
	tilesortspu.Conf('scale_to_mural_size', TILESORT_scale_to_mural_size)
	tilesortspu.TileLayoutFunction( LayoutTiles )
	tilesortSPUs.append(tilesortspu)

	clientnode = CRApplicationNode()
	clientnode.Conf('track_window_size', CLIENT_track_window_size)
	clientnode.AddSPU(tilesortspu)

	# argument substitutions
	if i == 0 and GLOBAL_zeroth_arg != "":
		app_string = string.replace( program, '%0', GLOBAL_zeroth_arg)
	else:
		app_string = string.replace( program, '%0', '' )
	app_string = string.replace( app_string, '%I', str(i) )
	app_string = string.replace( app_string, '%N', str(NUM_APP_NODES) )
	clientnode.SetApplication( app_string )
	clientnode.StartDir( GLOBAL_default_dir )

	if GLOBAL_auto_start:
		clientnode.AutoStart( ["/bin/sh", "-c",
				"LD_LIBRARY_PATH=%s /usr/local/bin/crappfaker" % crlibdir] )

	clientNodes.append(clientnode)


for row in range(TILE_ROWS):
	for col in range(TILE_COLS):

		# layout directions
		if RIGHT_TO_LEFT:
			j = TILE_COLS - col - 1
		else:
			j = col
		if BOTTOM_TO_TOP:
			i = TILE_ROWS - row - 1
		else:
			i = row

		# compute index for this tile
		index = i * TILE_COLS + j

		renderspu = SPU('render')
		renderspu.Conf('try_direct', RENDER_try_direct)
		renderspu.Conf('force_direct', RENDER_force_direct)
		renderspu.Conf('fullscreen', RENDER_fullscreen)
		renderspu.Conf('resizable', RENDER_resizable)
		renderspu.Conf('render_to_app_window', RENDER_render_to_app_window)
		renderspu.Conf('title', RENDER_title)
		renderspu.Conf('system_gl_path', RENDER_system_gl_path)

		if singleServer:
			renderspu.Conf('window_geometry',
						   [int(2.1 * j * TILE_WIDTH),
						   int(2.1 * i * TILE_HEIGHT),
						   2*TILE_WIDTH+50, 2*TILE_HEIGHT+50])
			host = SERVER_HOSTS[0]
		else:
			renderspu.Conf('window_geometry', [0, 0, TILE_WIDTH, TILE_HEIGHT])
			host = SERVER_HOSTS[index]
		servernode = CRNetworkNode(host)

		servernode.AddTile(col * TILE_WIDTH, TILE_HEIGHT,
						   TILE_WIDTH, TILE_HEIGHT)

		servernode.AddTile(col * TILE_WIDTH,
						   (TILE_ROWS - row - 1) * TILE_HEIGHT,
						   TILE_WIDTH, TILE_HEIGHT)

		servernode.AddSPU(renderspu)
		servernode.Conf('optimize_bucket', SERVER_optimize_bucket)
		servernode.Conf('only_swap_once', SERVER_only_swap_once)

		cr.AddNode(servernode)
		for i in range(NUM_APP_NODES):
			tilesortSPUs[i].AddServer(servernode, protocol='tcpip', port = 7000 + index)

		if GLOBAL_auto_start:
			servernode.AutoStart( ["/usr/bin/rsh", host,
									"/bin/sh -c 'DISPLAY=:0.0  CRMOTHERSHIP=%s  LD_LIBRARY_PATH=%s  crserver'" % (localHostname, crlibdir) ] )


for i in range(NUM_APP_NODES):
	cr.AddNode(clientNodes[i])
cr.Go()

