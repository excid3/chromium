# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# NOTE: The mothership _MUST_ be running on the same host as the application!


# If we use the Readback SPU, we'll just send images to the vncservers:
READBACK = 0

# Auto start the dummy/nop server?
AUTOSTART = 1


import sys, random
# Edit this
#sys.path.append( "../server" )
sys.path.append( "/home/projects/Chromium-main/cr/mothership/server" )
from mothership import *

# and maybe edit this
demo = sys.argv[1]

mothershipPort = int(sys.argv[1])  # %m
#mothershipPort = 10000
#directory = sys.argv[2]            # %d
#program = sys.argv[3]              # %p


cr = CR()


# Small MTU so we don't buffer up too much
if READBACK:
	cr.MTU( 3000*1024 );
else:
	cr.MTU( 10*1024 );


DummyServerPort = random.randint(7000, 7050)


#
# Set up client-side stuff
#
clientnode = CRApplicationNode( ) # XXX fix this

if READBACK:
	spu = SPU('readback')
	spu.Conf('resizable', 1)
	spu.Conf('title', 'the Readback SPU')
	spu.Conf('display_string', ':0')
	spu.Conf('render_to_app_window', 1)
	clientnode.AddSPU( spu )

repspu = SPU( 'replicate' )
clientnode.StartDir( crbindir )
#clientnode.SetApplication( demo ) # not really needed
clientnode.AddSPU( repspu )
clientnode.Conf( 'minimum_window_size', [10, 10] )
clientnode.Conf( 'maximum_window_size', [900, 900] )
#clientnode.Conf('track_window_size', 1)
#clientnode.Conf('track_window_position', 1)
#clientnode.Conf( 'ignore_window_list', '1' )
cr.AddNode( clientnode )


#
# Set up the initial dummy server
# The replicate SPU will initially attach to this server.
# Later, instances of the vncviewer will attach to the CRVNCServerNode below.
#
renderspu = SPU( 'nop' )
# default window size, small until resize occurs
renderspu.Conf( 'window_geometry', [ 0, 0, 1, 1 ] )
renderspu.Conf( 'show_cursor', '0' )
renderspu.Conf( 'title', 'the Render SPU' )

node = CRNetworkNode( );
node.AddSPU( renderspu )
if AUTOSTART:
	shell = "/bin/sh"
	env = "LD_LIBRARY_PATH=" + crlibdir
	prog = crbindir + "/crserver -mothership localhost:%d" % mothershipPort
	node.AutoStart( [shell, "-c", env + " " + prog] )
cr.AddNode( node );


# Add dummy server to the replicate SPU
repspu.AddServer( node, protocol='tcpip', port=DummyServerPort )


#
# Setup up the VNC server node.  All vncviewers that might come along
# will use this one node to configure themselves.
#
renderspu = SPU('render')
#renderspu.Conf('render_to_crut_window', 1) # A hack to hide the default window
renderspu.Conf('window_geometry', [0, 0, 1, 1])
renderspu.Conf('ignore_papi', 1)

vncServer = CRVNCServerNode()
vncServer.AddSPU(renderspu)
vncServer.Conf('ignore_papi', 1)
vncServer.Conf('shared_texture_objects', 0)
vncServer.Conf('shared_display_lists', 0)
vncServer.Conf('shared_programs', 0)
vncServer.Conf('unique_window_ids', 1)
cr.AddNode(vncServer)


cr.Go()
