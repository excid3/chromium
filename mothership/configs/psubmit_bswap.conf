# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# Demonstrate parallel submission with sort-last rendering.

import sys
sys.path.append( "../server" )
from mothership import *

Demo = 'psubmit'

# Can render/readback windows be dynamically resized?
Resizable = 1

# Test bounding boxes?
BBox = 0

# Use Pbuffers for off-screen rendering?
PBuffers = 0

# Image size:
Width = 250
Height = 250

# How many binaryswap nodes (must be a power of two: 2, 4, 8, etc.):
NumNodes = 4

Protocol = 'tcpip'
Hosts = ['localhost', 'localhost', 'localhost', 'localhost',
		 'localhost', 'localhost', 'localhost', 'localhost' ]
# You may optionally assign port numbers, like this:
# Hosts = ['localhost:7100', 'localhost:7102', 'localhost:7104', ... ]
# NOTE: the stride between port numbers must be at least as great as the
# number of swap stages (log2(NumNodes))!!!



# End of options.
# ======================================================================

Demo = os.path.join(crbindir, Demo)


# Build the Peers string
Peers = ''
for i in range(NumNodes):
	Peers += Protocol + '://' + Hosts[i]
	if i != NumNodes - 1:
		Peers += ','

print "Peers = " + Peers


# Set up the server node (where the final rendering will appear)
servernode = CRNetworkNode( )
# Note: set only_swap_once here and pass -swap flag to all clients
servernode.Conf( 'only_swap_once', 1 )
servernode.Conf( 'shared_windows', 1 )
renderspu = SPU( 'render' )
renderspu.Conf( 'window_geometry', [500, 500, Width, Height] )
renderspu.Conf('resizable', Resizable)
# only specifying visual to work-around ATI FireGL problem
renderspu.Conf('default_visual', 'rgb, double, depth, stencil')
servernode.AddSPU( renderspu )


appnodes = range(NumNodes)

for i in range(NumNodes):
	app = '%s -rank %d -size %d -clear -swap' % (Demo, i, NumNodes)
	if BBox:
		app += ' -bbox'
	if PBuffers:
		app += ' -pbuffer'
	appHost = string.split(Hosts[i], ':')[0]  # remove ':port' part if present
	appnodes[i] = CRApplicationNode( appHost )
	appnodes[i].SetApplication( app )
	appnodes[i].StartDir( crbindir )
	spu = SPU('binaryswap')
	x = i * (Width + 20)
	y = 0
	spu.Conf('window_geometry', [x, y, Width, Height])
	spu.Conf('type', 'depth')
	spu.Conf('resizable', Resizable)
	spu.Conf('peers', Peers)
	# only specifying visual to work-around ATI FireGL problem
	spu.Conf('default_visual', 'rgb, double, depth, stencil')
	spu.Conf('node_number', i)
	spu.Conf('title', 'binary-swap SPU node %d' % i)
	appnodes[i].AddSPU( spu )
	spu = SPU('pack')
	spu.AddServer( servernode, 'tcpip' )
	appnodes[i].AddSPU( spu )


cr = CR()
cr.MTU( 1024*1024 )
cr.AddNode( servernode )
for node in appnodes:
	cr.AddNode( node )
cr.Go()
