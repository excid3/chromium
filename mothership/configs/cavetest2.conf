# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# Demo of running the city demo in a 4-wall CAVE-like environment.
# We have eight render servers. There are two tiles and servers per wall.
# We use the 'view_matrix' and 'projection_matrix' server config
# options to override the application's viewing and projection transformations.


import sys
sys.path.append( "../server" )
from mothership import *
from crmatrix import *


if len(sys.argv) > 1:
	demo = sys.argv[1]
else:
	demo = "city"

cr = CR()
cr.MTU( 1024*1024 )


titles = [ '-Z view', '+X view', '+Z view', '-X view' ]
WALLS = 4
WALL_WIDTH = 300
WALL_HEIGHT = 300
APP_MATRICES = 0    # Are the view-specific matrices specified in the app?

xTranslate = 0
yTranslate = 0
zTranslate = 0

if demo[0:4] == "city":
	fScale = 0.5
	farPlane = 80.0
	zTranslate = 0.0
	print "Demo is:" + demo
	demo += " -b 20"         # fewer buildings
	demo += " -v %d" % WALLS # specify number of views
	demo += " -t 2"          # two tiles per view
	demo += " -c"            # enable cave mode
	print "Demo is:" + demo
	APP_MATRICES = 1           # city demo will specify frustums
elif demo == "atlantis":
	fScale = 1.0          # view frustum scale/shape (and near clip plane)
	farPlane = 40000.0    # atlantis uses big coordinates!
	zTranslate = 80000.0  # put us in the middle of the fish
	demo += " -s 20"      # more sharks!
else:
	# you'll probably have to tune this
	fScale = 0.5
	farPlane = 100.0
	yTranslate = -5.0
	zTranslate = 50.0


tilesortspu = SPU( 'tilesort' )
# Do bucketing by testing bounding boxes against viewing frustums
tilesortspu.Conf('bucket_mode', 'Frustum')

clientnode = CRApplicationNode( )
clientnode.StartDir( crbindir )
clientnode.SetApplication( demo )
clientnode.AddSPU( tilesortspu )

# create the four walls
for wall in range(WALLS):

	# two tiles per wall
	for split in range(2):

		renderspu = SPU( 'render' )

		# compute window and tile geometry
		if wall == 0 or wall == 2:
			# split horizontally into top/bottom halves
			x = wall * (WALL_WIDTH + 10)
			y = split * WALL_HEIGHT / 2
			w = WALL_WIDTH
			h = WALL_HEIGHT / 2
			tx = 0
			ty = (1 - split) * WALL_HEIGHT / 2
		else:
			# split vertically into left/right halves
			x = wall * (WALL_WIDTH + 10) + (split * WALL_WIDTH / 2)
			y = 0
			w = WALL_WIDTH / 2
			h = WALL_HEIGHT
			tx = split * WALL_WIDTH / 2
			ty = 0
		renderspu.Conf( 'window_geometry', [x, y, w, h] )
		renderspu.Conf( 'title', titles[wall] )

		node = CRNetworkNode( )
		node.Conf('optimize_bucket', 0) # can't use optimized bucketing here
		node.AddTile( tx, ty, w, h )

		# Each view is another 90 degree rotation about the Y axis
		if not APP_MATRICES:
			v = CRMatrix()
			v.YRotate(90 * wall)
			v.Translate(xTranslate, yTranslate, zTranslate)
			node.Conf('view_matrix', v.ToList())

		# Set projection matrix centered at (0,0,0) projecting through
		# a side of the cube.
		# Note: all tiles for a particular wall get the same frustum!
		if not APP_MATRICES:
			p = CRMatrix()
			p.Frustum( -fScale, fScale, -fScale, fScale, fScale, farPlane )
			node.Conf('projection_matrix', p.ToList())

		node.AddSPU( renderspu )
		cr.AddNode( node )

		tilesortspu.AddServer( node, protocol = 'tcpip',
							   port = 7000 + wall * 2 + split )


cr.AddNode( clientnode )

cr.Go()
