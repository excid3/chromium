# Copyright (c) 2001, Stanford University
# All rights reserved
#
# See the file LICENSE.txt for information on redistributing this software.

# Demonstrate parallel submission with sort-first rendering.

import sys
sys.path.append( "../server" )
from mothership import *

if len(sys.argv) > 1:
	Demo = sys.argv[1]
	firstExtra = 2
else:
	Demo = 'psubmit'
	firstExtra = 1
	
# Collect remaining command line params as program options
ExtraOpts = ""
for arg in sys.argv[firstExtra:]:
	ExtraOpts += arg + " "

Demo = os.path.join(crbindir, Demo)


TileWidth = 200
TileHeight = 400

NumApps = 2

Servers = ['localhost', 'localhost']
Clients = ['localhost', 'localhost', 'localhost', 'localhost']

DrawBbox = 0
BucketMode = "Uniform Grid"

cr = CR()
cr.MTU( 10*1024*1024 )

# Set up the first server node
servernode1 = CRNetworkNode(Servers[0])
renderspu = SPU( 'render' )
renderspu.Conf( 'window_geometry', [0, 0, TileWidth, TileHeight] )
# only specifying visual to work-around ATI FireGL problem
renderspu.Conf('default_visual', 'rgb, double, depth')
servernode1.AddSPU( renderspu )
servernode1.Conf('shared_windows', 1)
servernode1.AddTile( 0, 0, TileWidth, TileHeight )
cr.AddNode( servernode1 )

# Set up second server node
servernode2 = CRNetworkNode(Servers[1])
renderspu = SPU( 'render' )
renderspu.Conf( 'window_geometry', [TileWidth+10, 0, TileWidth, TileHeight] )
# only specifying visual to work-around ATI FireGL problem
renderspu.Conf('default_visual', 'rgb, double, depth')
servernode2.AddSPU( renderspu )
servernode2.Conf('shared_windows', 1)
servernode2.AddTile( TileWidth, 0, TileWidth, TileHeight )
cr.AddNode( servernode2 )

# Set up app/client nodes
for rank in range(0, NumApps):
	appnode = CRApplicationNode(Clients[rank])
	if rank == 0:
		appnode.SetApplication( '%s -rank 0 -size %d -clear -swap %s' % (Demo, NumApps, ExtraOpts) )
	else:
		appnode.SetApplication( '%s -rank %d -size %d %s' % (Demo, rank, NumApps, ExtraOpts) )
	appnode.StartDir( crbindir )
	spu = SPU('tilesort')
	spu.Conf('fake_window_dims', [TileWidth * 2, TileHeight] )
	spu.Conf('draw_bbox', DrawBbox)
	spu.Conf('bucket_mode', BucketMode)
	appnode.AddSPU( spu )
	spu.AddServer( servernode1, protocol='tcpip', port=7000 )
	spu.AddServer( servernode2, protocol='tcpip', port=7001 )
	cr.AddNode( appnode )


cr.Go()
