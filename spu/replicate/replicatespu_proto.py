# Copyright (c) 2001, Stanford University
# All rights reserved.
#
# See the file LICENSE.txt for information on redistributing this software.

import sys

sys.path.append( "../../glapi_parser" )
import apiutil

apiutil.CopyrightC()

print """
/* DO NOT EDIT - THIS FILE AUTOMATICALLY GENERATED BY replicatespu_proto.py SCRIPT */

#ifndef REPLICATESPU_FUNCTIONS_H
#define REPLICATESPU_FUNCTIONS_H 1

#include <stdio.h>
#include "cr_string.h"
#include "cr_spu.h"
#include "replicatespu.h"
#include "cr_packfunctions.h"
"""


pack_specials = []

keys = apiutil.GetDispatchedFunctions("../../glapi_parser/APIspec.txt")

# Create prototypes for every function that we either implement
# or generate.  The ones we implement are easy: they're all in
# the file "replicate_special".  The others are harder; this
# code must be equivalent to the selection algorithm used in
# replicatespu_generate.py and in replicate.py.
for func_name in keys:
	if (apiutil.FindSpecial("replicate", func_name) or
		apiutil.IsQuery(func_name) or
		apiutil.CanCompile(func_name) or
		apiutil.FindSpecial("replicatespu_flush", func_name) or
		apiutil.SetsTrackedState(func_name)):

		return_type = apiutil.ReturnType(func_name)
		props = apiutil.Properties(func_name)
		params = apiutil.Parameters(func_name)
		print 'extern %s REPLICATESPU_APIENTRY replicatespu_%s( %s );' % ( return_type, func_name, apiutil.MakeDeclarationString(params) )

print """
#endif
"""
