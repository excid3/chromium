# Copyright (c) 2001, Stanford University
# All rights reserved.
#
# See the file LICENSE.txt for information on redistributing this software.

import sys

sys.path.append( "../../glapi_parser" )
import apiutil


keys = apiutil.GetDispatchedFunctions("../../glapi_parser/APIspec.txt")


apiutil.CopyrightC()

print """
/* DO NOT EDIT - THIS FILE AUTOMATICALLY GENERATED BY replicate.py SCRIPT */
#include <stdio.h>
#include "cr_string.h"
#include "cr_spu.h"
#include "replicatespu.h"
#include "cr_packfunctions.h"
#include "replicatespu_proto.h"
"""

num_funcs = len(keys)
print 'SPUNamedFunctionTable _cr_replicate_table[%d];' % (num_funcs+1)

print """
static void __fillin( int offset, char *name, SPUGenericFunction func )
{
	_cr_replicate_table[offset].name = crStrdup( name );
	_cr_replicate_table[offset].fn = func;
}"""

pack_specials = []

# The selection mechanism here must match the selection
# mechanisms used in replicatespu_proto.py and 
# replicatespu_generate.py.
for func_name in keys:
	if (apiutil.FindSpecial("replicate", func_name) or
		apiutil.IsQuery(func_name) or
		apiutil.CanCompile(func_name) or
		apiutil.FindSpecial("replicatespu_flush", func_name) or
		apiutil.SetsTrackedState(func_name)):
		pack_specials.append( func_name )

print '\nvoid replicatespuCreateFunctions( void )'
print '{'
print '\tint i = 0;'
for index in range(num_funcs):
	func_name = keys[index]
	if func_name in pack_specials:
		print '\t__fillin( i++, "%s", (SPUGenericFunction) replicatespu_%s );' % (func_name, func_name )
	else:
		print '\t__fillin( i++, "%s", (SPUGenericFunction) (replicate_spu.swap ? crPack%sSWAP : crPack%s) );' % (func_name, func_name, func_name )
print '\t__fillin( i++, NULL, NULL );'
print '\tCRASSERT(i <= %d);' % (num_funcs + 1)
print '}'
