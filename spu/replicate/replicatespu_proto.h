/* Copyright (c) 2001, Stanford University
	All rights reserved.

	See the file LICENSE.txt for information on redistributing this software. */
	

/* DO NOT EDIT - THIS FILE AUTOMATICALLY GENERATED BY replicatespu_proto.py SCRIPT */

#ifndef REPLICATESPU_FUNCTIONS_H
#define REPLICATESPU_FUNCTIONS_H 1

#include <stdio.h>
#include "cr_string.h"
#include "cr_spu.h"
#include "replicatespu.h"
#include "cr_packfunctions.h"

extern void REPLICATESPU_APIENTRY replicatespu_Accum( GLenum op, GLfloat value );
extern void REPLICATESPU_APIENTRY replicatespu_ActiveTextureARB( GLenum texture );
extern void REPLICATESPU_APIENTRY replicatespu_AlphaFunc( GLenum func, GLclampf ref );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_AreProgramsResidentNV( GLsizei n, const GLuint * ids, GLboolean * residences );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_AreTexturesResident( GLsizei n, const GLuint * textures, GLboolean * residences );
extern void REPLICATESPU_APIENTRY replicatespu_ArrayElement( GLint i );
extern void REPLICATESPU_APIENTRY replicatespu_BarrierCreateCR( GLuint name, GLuint count );
extern void REPLICATESPU_APIENTRY replicatespu_BarrierExecCR( GLuint name );
extern void REPLICATESPU_APIENTRY replicatespu_Begin( GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_BeginQueryARB( GLenum target, GLuint id );
extern void REPLICATESPU_APIENTRY replicatespu_BindBufferARB( GLenum target, GLuint buffer );
extern void REPLICATESPU_APIENTRY replicatespu_BindProgramARB( GLenum target, GLuint program );
extern void REPLICATESPU_APIENTRY replicatespu_BindProgramNV( GLenum target, GLuint id );
extern void REPLICATESPU_APIENTRY replicatespu_BindTexture( GLenum target, GLuint texture );
extern void REPLICATESPU_APIENTRY replicatespu_Bitmap( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap );
extern void REPLICATESPU_APIENTRY replicatespu_BlendColorEXT( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
extern void REPLICATESPU_APIENTRY replicatespu_BlendEquationEXT( GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_BlendFunc( GLenum sfactor, GLenum dfactor );
extern void REPLICATESPU_APIENTRY replicatespu_BlendFuncSeparateEXT( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorA, GLenum dfactorA );
extern void REPLICATESPU_APIENTRY replicatespu_BufferDataARB( GLenum target, GLsizeiptrARB size, const GLvoid * data, GLenum usage );
extern void REPLICATESPU_APIENTRY replicatespu_CallList( GLuint list );
extern void REPLICATESPU_APIENTRY replicatespu_CallLists( GLsizei n, GLenum type, const GLvoid * lists );
extern void REPLICATESPU_APIENTRY replicatespu_ChromiumParametervCR( GLenum target, GLenum type, GLsizei count, const GLvoid * values );
extern void REPLICATESPU_APIENTRY replicatespu_Clear( GLbitfield mask );
extern void REPLICATESPU_APIENTRY replicatespu_ClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
extern void REPLICATESPU_APIENTRY replicatespu_ClearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
extern void REPLICATESPU_APIENTRY replicatespu_ClearDepth( GLclampd depth );
extern void REPLICATESPU_APIENTRY replicatespu_ClearIndex( GLfloat c );
extern void REPLICATESPU_APIENTRY replicatespu_ClearStencil( GLint s );
extern void REPLICATESPU_APIENTRY replicatespu_ClientActiveTextureARB( GLenum texture );
extern void REPLICATESPU_APIENTRY replicatespu_ClipPlane( GLenum plane, const GLdouble * equation );
extern void REPLICATESPU_APIENTRY replicatespu_Color3b( GLbyte red, GLbyte green, GLbyte blue );
extern void REPLICATESPU_APIENTRY replicatespu_Color3bv( const GLbyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color3d( GLdouble red, GLdouble green, GLdouble blue );
extern void REPLICATESPU_APIENTRY replicatespu_Color3dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color3f( GLfloat red, GLfloat green, GLfloat blue );
extern void REPLICATESPU_APIENTRY replicatespu_Color3fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color3i( GLint red, GLint green, GLint blue );
extern void REPLICATESPU_APIENTRY replicatespu_Color3iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color3s( GLshort red, GLshort green, GLshort blue );
extern void REPLICATESPU_APIENTRY replicatespu_Color3sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color3ub( GLubyte red, GLubyte green, GLubyte blue );
extern void REPLICATESPU_APIENTRY replicatespu_Color3ubv( const GLubyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color3ui( GLuint red, GLuint green, GLuint blue );
extern void REPLICATESPU_APIENTRY replicatespu_Color3uiv( const GLuint * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color3us( GLushort red, GLushort green, GLushort blue );
extern void REPLICATESPU_APIENTRY replicatespu_Color3usv( const GLushort * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color4b( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
extern void REPLICATESPU_APIENTRY replicatespu_Color4bv( const GLbyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color4d( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
extern void REPLICATESPU_APIENTRY replicatespu_Color4dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color4f( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
extern void REPLICATESPU_APIENTRY replicatespu_Color4fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color4i( GLint red, GLint green, GLint blue, GLint alpha );
extern void REPLICATESPU_APIENTRY replicatespu_Color4iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color4s( GLshort red, GLshort green, GLshort blue, GLshort alpha );
extern void REPLICATESPU_APIENTRY replicatespu_Color4sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
extern void REPLICATESPU_APIENTRY replicatespu_Color4ubv( const GLubyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha );
extern void REPLICATESPU_APIENTRY replicatespu_Color4uiv( const GLuint * v );
extern void REPLICATESPU_APIENTRY replicatespu_Color4us( GLushort red, GLushort green, GLushort blue, GLushort alpha );
extern void REPLICATESPU_APIENTRY replicatespu_Color4usv( const GLushort * v );
extern void REPLICATESPU_APIENTRY replicatespu_ColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
extern void REPLICATESPU_APIENTRY replicatespu_ColorMaterial( GLenum face, GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_ColorPointer( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_CombinerInputNV( GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );
extern void REPLICATESPU_APIENTRY replicatespu_CombinerOutputNV( GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum );
extern void REPLICATESPU_APIENTRY replicatespu_CombinerParameterfNV( GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_CombinerParameterfvNV( GLenum pname, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_CombinerParameteriNV( GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_CombinerParameterivNV( GLenum pname, const GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_CombinerStageParameterfvNV( GLenum stage, GLenum pname, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_CompressedTexImage1DARB( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLint border, GLsizei imagesize, const GLvoid * data );
extern void REPLICATESPU_APIENTRY replicatespu_CompressedTexImage2DARB( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLint border, GLsizei imagesize, const GLvoid * data );
extern void REPLICATESPU_APIENTRY replicatespu_CompressedTexImage3DARB( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imagesize, const GLvoid * data );
extern void REPLICATESPU_APIENTRY replicatespu_CompressedTexSubImage1DARB( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imagesize, const GLvoid * data );
extern void REPLICATESPU_APIENTRY replicatespu_CompressedTexSubImage2DARB( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imagesize, const GLvoid * data );
extern void REPLICATESPU_APIENTRY replicatespu_CompressedTexSubImage3DARB( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imagesize, const GLvoid * data );
extern void REPLICATESPU_APIENTRY replicatespu_CopyPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
extern void REPLICATESPU_APIENTRY replicatespu_CopyTexImage1D( GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border );
extern void REPLICATESPU_APIENTRY replicatespu_CopyTexImage2D( GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
extern void REPLICATESPU_APIENTRY replicatespu_CopyTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
extern void REPLICATESPU_APIENTRY replicatespu_CopyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
extern void REPLICATESPU_APIENTRY replicatespu_CopyTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
extern GLint REPLICATESPU_APIENTRY replicatespu_CreateContext( const char * dpyName, GLint visual, GLint shareCtx );
extern void REPLICATESPU_APIENTRY replicatespu_CullFace( GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_DeleteFencesNV( GLsizei n, const GLuint * fences );
extern void REPLICATESPU_APIENTRY replicatespu_DeleteLists( GLuint list, GLsizei range );
extern void REPLICATESPU_APIENTRY replicatespu_DeleteTextures( GLsizei n, const GLuint * textures );
extern void REPLICATESPU_APIENTRY replicatespu_DepthFunc( GLenum func );
extern void REPLICATESPU_APIENTRY replicatespu_DepthMask( GLboolean flag );
extern void REPLICATESPU_APIENTRY replicatespu_DepthRange( GLclampd zNear, GLclampd zFar );
extern void REPLICATESPU_APIENTRY replicatespu_DestroyContext( GLint ctx );
extern void REPLICATESPU_APIENTRY replicatespu_Disable( GLenum cap );
extern void REPLICATESPU_APIENTRY replicatespu_DisableClientState( GLenum array );
extern void REPLICATESPU_APIENTRY replicatespu_DisableVertexAttribArrayARB( GLuint index );
extern void REPLICATESPU_APIENTRY replicatespu_DrawArrays( GLenum mode, GLint first, GLsizei count );
extern void REPLICATESPU_APIENTRY replicatespu_DrawBuffer( GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_DrawElements( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices );
extern void REPLICATESPU_APIENTRY replicatespu_DrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels );
extern void REPLICATESPU_APIENTRY replicatespu_DrawRangeElements( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices );
extern void REPLICATESPU_APIENTRY replicatespu_EdgeFlag( GLboolean flag );
extern void REPLICATESPU_APIENTRY replicatespu_EdgeFlagPointer( GLsizei stride, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_EdgeFlagv( const GLboolean * flag );
extern void REPLICATESPU_APIENTRY replicatespu_Enable( GLenum cap );
extern void REPLICATESPU_APIENTRY replicatespu_EnableClientState( GLenum array );
extern void REPLICATESPU_APIENTRY replicatespu_EnableVertexAttribArrayARB( GLuint index );
extern void REPLICATESPU_APIENTRY replicatespu_End( void );
extern void REPLICATESPU_APIENTRY replicatespu_EndList( void );
extern void REPLICATESPU_APIENTRY replicatespu_EndQueryARB( GLenum target );
extern void REPLICATESPU_APIENTRY replicatespu_EvalCoord1d( GLdouble u );
extern void REPLICATESPU_APIENTRY replicatespu_EvalCoord1dv( const GLdouble * u );
extern void REPLICATESPU_APIENTRY replicatespu_EvalCoord1f( GLfloat u );
extern void REPLICATESPU_APIENTRY replicatespu_EvalCoord1fv( const GLfloat * u );
extern void REPLICATESPU_APIENTRY replicatespu_EvalCoord2d( GLdouble u, GLdouble v );
extern void REPLICATESPU_APIENTRY replicatespu_EvalCoord2dv( const GLdouble * u );
extern void REPLICATESPU_APIENTRY replicatespu_EvalCoord2f( GLfloat u, GLfloat v );
extern void REPLICATESPU_APIENTRY replicatespu_EvalCoord2fv( const GLfloat * u );
extern void REPLICATESPU_APIENTRY replicatespu_EvalMesh1( GLenum mode, GLint i1, GLint i2 );
extern void REPLICATESPU_APIENTRY replicatespu_EvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
extern void REPLICATESPU_APIENTRY replicatespu_EvalPoint1( GLint i );
extern void REPLICATESPU_APIENTRY replicatespu_EvalPoint2( GLint i, GLint j );
extern void REPLICATESPU_APIENTRY replicatespu_ExecuteProgramNV( GLenum target, GLuint id, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_FeedbackBuffer( GLsizei size, GLenum type, GLfloat * buffer );
extern void REPLICATESPU_APIENTRY replicatespu_FinalCombinerInputNV( GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );
extern void REPLICATESPU_APIENTRY replicatespu_Finish( void );
extern void REPLICATESPU_APIENTRY replicatespu_Flush( void );
extern void REPLICATESPU_APIENTRY replicatespu_FlushVertexArrayRangeNV( void );
extern void REPLICATESPU_APIENTRY replicatespu_FogCoordPointerEXT( GLenum type, GLsizei stride, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_FogCoorddEXT( GLdouble coord );
extern void REPLICATESPU_APIENTRY replicatespu_FogCoorddvEXT( const GLdouble * coord );
extern void REPLICATESPU_APIENTRY replicatespu_FogCoordfEXT( GLfloat coord );
extern void REPLICATESPU_APIENTRY replicatespu_FogCoordfvEXT( const GLfloat * coord );
extern void REPLICATESPU_APIENTRY replicatespu_Fogf( GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_Fogfv( GLenum pname, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_Fogi( GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_Fogiv( GLenum pname, const GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_FrontFace( GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_Frustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
extern void REPLICATESPU_APIENTRY replicatespu_GenBuffersARB( GLsizei n, GLuint * buffer );
extern void REPLICATESPU_APIENTRY replicatespu_GenFencesNV( GLsizei n, GLuint * fences );
extern GLuint REPLICATESPU_APIENTRY replicatespu_GenLists( GLsizei range );
extern void REPLICATESPU_APIENTRY replicatespu_GenProgramsARB( GLsizei n, GLuint * programs );
extern void REPLICATESPU_APIENTRY replicatespu_GenProgramsNV( GLsizei n, GLuint * ids );
extern void REPLICATESPU_APIENTRY replicatespu_GenQueriesARB( GLsizei n, GLuint * ids );
extern void REPLICATESPU_APIENTRY replicatespu_GenTextures( GLsizei n, GLuint * textures );
extern void REPLICATESPU_APIENTRY replicatespu_GetBooleanv( GLenum pname, GLboolean * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetBufferParameterivARB( GLenum target, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetBufferPointervARB( GLenum target, GLenum pname, GLvoid ** params );
extern void REPLICATESPU_APIENTRY replicatespu_GetBufferSubDataARB( GLenum target, GLintptrARB offset, GLsizeiptrARB size, void * data );
extern void REPLICATESPU_APIENTRY replicatespu_GetChromiumParametervCR( GLenum target, GLuint index, GLenum type, GLsizei count, GLvoid * values );
extern void REPLICATESPU_APIENTRY replicatespu_GetClipPlane( GLenum plane, GLdouble * equation );
extern void REPLICATESPU_APIENTRY replicatespu_GetCombinerInputParameterfvNV( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetCombinerInputParameterivNV( GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetCombinerOutputParameterfvNV( GLenum stage, GLenum portion, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetCombinerOutputParameterivNV( GLenum stage, GLenum portion, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetCombinerStageParameterfvNV( GLenum stage, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetCompressedTexImageARB( GLenum target, GLint level, GLvoid * img );
extern void REPLICATESPU_APIENTRY replicatespu_GetDoublev( GLenum pname, GLdouble * params );
extern GLenum REPLICATESPU_APIENTRY replicatespu_GetError( void );
extern void REPLICATESPU_APIENTRY replicatespu_GetFenceivNV( GLuint fence, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetFinalCombinerInputParameterfvNV( GLenum variable, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetFinalCombinerInputParameterivNV( GLenum variable, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetFloatv( GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetIntegerv( GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetLightfv( GLenum light, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetLightiv( GLenum light, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetMapdv( GLenum target, GLenum query, GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_GetMapfv( GLenum target, GLenum query, GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_GetMapiv( GLenum target, GLenum query, GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_GetMaterialfv( GLenum face, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetMaterialiv( GLenum face, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetPixelMapfv( GLenum map, GLfloat * values );
extern void REPLICATESPU_APIENTRY replicatespu_GetPixelMapuiv( GLenum map, GLuint * values );
extern void REPLICATESPU_APIENTRY replicatespu_GetPixelMapusv( GLenum map, GLushort * values );
extern void REPLICATESPU_APIENTRY replicatespu_GetPointerv( GLenum pname, GLvoid ** params );
extern void REPLICATESPU_APIENTRY replicatespu_GetPolygonStipple( GLubyte * mask );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramEnvParameterdvARB( GLenum target, GLuint index, GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramEnvParameterfvARB( GLenum target, GLuint index, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramLocalParameterdvARB( GLenum target, GLuint index, GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramLocalParameterfvARB( GLenum target, GLuint index, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramNamedParameterdvNV( GLuint id, GLsizei len, const GLubyte * name, GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramNamedParameterfvNV( GLuint id, GLsizei len, const GLubyte * name, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramParameterdvNV( GLenum target, GLuint index, GLenum pname, GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramParameterfvNV( GLenum target, GLuint index, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramStringARB( GLenum target, GLenum pname, GLvoid * string );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramStringNV( GLuint id, GLenum pname, GLubyte * program );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramivARB( GLenum target, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetProgramivNV( GLuint id, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetQueryObjectivARB( GLuint id, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetQueryObjectuivARB( GLuint id, GLenum pname, GLuint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetQueryivARB( GLenum target, GLenum pname, GLint * params );
extern const GLubyte * REPLICATESPU_APIENTRY replicatespu_GetString( GLenum name );
extern void REPLICATESPU_APIENTRY replicatespu_GetTexEnvfv( GLenum target, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetTexEnviv( GLenum target, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetTexGendv( GLenum coord, GLenum pname, GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetTexGenfv( GLenum coord, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetTexGeniv( GLenum coord, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetTexImage( GLenum target, GLint level, GLenum format, GLenum type, GLvoid * pixels );
extern void REPLICATESPU_APIENTRY replicatespu_GetTexLevelParameterfv( GLenum target, GLint level, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetTexLevelParameteriv( GLenum target, GLint level, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetTexParameterfv( GLenum target, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetTexParameteriv( GLenum target, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetTrackMatrixivNV( GLenum target, GLuint address, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetVertexAttribPointervARB( GLuint index, GLenum pname, GLvoid ** pointer );
extern void REPLICATESPU_APIENTRY replicatespu_GetVertexAttribPointervNV( GLuint index, GLenum pname, GLvoid ** pointer );
extern void REPLICATESPU_APIENTRY replicatespu_GetVertexAttribdvARB( GLuint index, GLenum pname, GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetVertexAttribdvNV( GLuint index, GLenum pname, GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetVertexAttribfvARB( GLuint index, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetVertexAttribfvNV( GLuint index, GLenum pname, GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetVertexAttribivARB( GLuint index, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_GetVertexAttribivNV( GLuint index, GLenum pname, GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_Hint( GLenum target, GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_IndexMask( GLuint mask );
extern void REPLICATESPU_APIENTRY replicatespu_IndexPointer( GLenum type, GLsizei stride, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_Indexd( GLdouble c );
extern void REPLICATESPU_APIENTRY replicatespu_Indexdv( const GLdouble * c );
extern void REPLICATESPU_APIENTRY replicatespu_Indexf( GLfloat c );
extern void REPLICATESPU_APIENTRY replicatespu_Indexfv( const GLfloat * c );
extern void REPLICATESPU_APIENTRY replicatespu_Indexi( GLint c );
extern void REPLICATESPU_APIENTRY replicatespu_Indexiv( const GLint * c );
extern void REPLICATESPU_APIENTRY replicatespu_Indexs( GLshort c );
extern void REPLICATESPU_APIENTRY replicatespu_Indexsv( const GLshort * c );
extern void REPLICATESPU_APIENTRY replicatespu_Indexub( GLubyte c );
extern void REPLICATESPU_APIENTRY replicatespu_Indexubv( const GLubyte * c );
extern void REPLICATESPU_APIENTRY replicatespu_InitNames( void );
extern void REPLICATESPU_APIENTRY replicatespu_InterleavedArrays( GLenum format, GLsizei stride, const GLvoid * pointer );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_IsBufferARB( GLuint buffer );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_IsEnabled( GLenum cap );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_IsFenceNV( GLuint fence );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_IsList( GLuint list );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_IsProgramARB( GLuint program );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_IsQueryARB( GLuint id );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_IsTexture( GLuint texture );
extern void REPLICATESPU_APIENTRY replicatespu_LightModelf( GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_LightModelfv( GLenum pname, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_LightModeli( GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_LightModeliv( GLenum pname, const GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_Lightf( GLenum light, GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_Lightfv( GLenum light, GLenum pname, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_Lighti( GLenum light, GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_Lightiv( GLenum light, GLenum pname, const GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_LineStipple( GLint factor, GLushort pattern );
extern void REPLICATESPU_APIENTRY replicatespu_LineWidth( GLfloat width );
extern void REPLICATESPU_APIENTRY replicatespu_ListBase( GLuint base );
extern void REPLICATESPU_APIENTRY replicatespu_LoadIdentity( void );
extern void REPLICATESPU_APIENTRY replicatespu_LoadMatrixd( const GLdouble * m );
extern void REPLICATESPU_APIENTRY replicatespu_LoadMatrixf( const GLfloat * m );
extern void REPLICATESPU_APIENTRY replicatespu_LoadName( GLuint name );
extern void REPLICATESPU_APIENTRY replicatespu_LoadProgramNV( GLenum target, GLuint id, GLsizei len, const GLubyte * program );
extern void REPLICATESPU_APIENTRY replicatespu_LoadTransposeMatrixdARB( const GLdouble * m );
extern void REPLICATESPU_APIENTRY replicatespu_LoadTransposeMatrixfARB( const GLfloat * m );
extern void REPLICATESPU_APIENTRY replicatespu_LogicOp( GLenum opcode );
extern void REPLICATESPU_APIENTRY replicatespu_MakeCurrent( GLint window, GLint nativeWindow, GLint ctx );
extern void REPLICATESPU_APIENTRY replicatespu_Map1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points );
extern void REPLICATESPU_APIENTRY replicatespu_Map1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points );
extern void REPLICATESPU_APIENTRY replicatespu_Map2d( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points );
extern void REPLICATESPU_APIENTRY replicatespu_Map2f( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points );
extern void * REPLICATESPU_APIENTRY replicatespu_MapBufferARB( GLenum target, GLenum access );
extern void REPLICATESPU_APIENTRY replicatespu_MapGrid1d( GLint un, GLdouble u1, GLdouble u2 );
extern void REPLICATESPU_APIENTRY replicatespu_MapGrid1f( GLint un, GLfloat u1, GLfloat u2 );
extern void REPLICATESPU_APIENTRY replicatespu_MapGrid2d( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
extern void REPLICATESPU_APIENTRY replicatespu_MapGrid2f( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
extern void REPLICATESPU_APIENTRY replicatespu_Materialf( GLenum face, GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_Materialfv( GLenum face, GLenum pname, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_Materiali( GLenum face, GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_Materialiv( GLenum face, GLenum pname, const GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_MatrixMode( GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_MultMatrixd( const GLdouble * m );
extern void REPLICATESPU_APIENTRY replicatespu_MultMatrixf( const GLfloat * m );
extern void REPLICATESPU_APIENTRY replicatespu_MultTransposeMatrixdARB( const GLdouble * m );
extern void REPLICATESPU_APIENTRY replicatespu_MultTransposeMatrixfARB( const GLfloat * m );
extern void REPLICATESPU_APIENTRY replicatespu_MultiDrawArraysEXT( GLenum mode, GLint * first, GLsizei * count, GLsizei primcount );
extern void REPLICATESPU_APIENTRY replicatespu_MultiDrawElementsEXT( GLenum mode, const GLsizei * count, GLenum type, const GLvoid ** indices, GLsizei primcount );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord1dARB( GLenum texture, GLdouble s );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord1dvARB( GLenum texture, const GLdouble * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord1fARB( GLenum texture, GLfloat s );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord1fvARB( GLenum texture, const GLfloat * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord1iARB( GLenum texture, GLint s );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord1ivARB( GLenum texture, const GLint * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord1sARB( GLenum texture, GLshort s );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord1svARB( GLenum texture, const GLshort * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord2dARB( GLenum texture, GLdouble s, GLdouble t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord2dvARB( GLenum texture, const GLdouble * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord2fARB( GLenum texture, GLfloat s, GLfloat t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord2fvARB( GLenum texture, const GLfloat * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord2iARB( GLenum texture, GLint s, GLint t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord2ivARB( GLenum texture, const GLint * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord2sARB( GLenum texture, GLshort s, GLshort t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord2svARB( GLenum texture, const GLshort * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord3dARB( GLenum texture, GLdouble s, GLdouble t, GLdouble r );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord3dvARB( GLenum texture, const GLdouble * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord3fARB( GLenum texture, GLfloat s, GLfloat t, GLfloat r );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord3fvARB( GLenum texture, const GLfloat * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord3iARB( GLenum texture, GLint s, GLint t, GLint r );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord3ivARB( GLenum texture, const GLint * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord3sARB( GLenum texture, GLshort s, GLshort t, GLshort r );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord3svARB( GLenum texture, const GLshort * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord4dARB( GLenum texture, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord4dvARB( GLenum texture, const GLdouble * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord4fARB( GLenum texture, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord4fvARB( GLenum texture, const GLfloat * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord4iARB( GLenum texture, GLint s, GLint t, GLint r, GLint q );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord4ivARB( GLenum texture, const GLint * t );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord4sARB( GLenum texture, GLshort s, GLshort t, GLshort r, GLshort q );
extern void REPLICATESPU_APIENTRY replicatespu_MultiTexCoord4svARB( GLenum texture, const GLshort * t );
extern void REPLICATESPU_APIENTRY replicatespu_NewList( GLuint list, GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_Normal3b( GLbyte nx, GLbyte ny, GLbyte nz );
extern void REPLICATESPU_APIENTRY replicatespu_Normal3bv( const GLbyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_Normal3d( GLdouble nx, GLdouble ny, GLdouble nz );
extern void REPLICATESPU_APIENTRY replicatespu_Normal3dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_Normal3f( GLfloat nx, GLfloat ny, GLfloat nz );
extern void REPLICATESPU_APIENTRY replicatespu_Normal3fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_Normal3i( GLint nx, GLint ny, GLint nz );
extern void REPLICATESPU_APIENTRY replicatespu_Normal3iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_Normal3s( GLshort nx, GLshort ny, GLshort nz );
extern void REPLICATESPU_APIENTRY replicatespu_Normal3sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_NormalPointer( GLenum type, GLsizei stride, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_Ortho( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );
extern void REPLICATESPU_APIENTRY replicatespu_PassThrough( GLfloat token );
extern void REPLICATESPU_APIENTRY replicatespu_PixelMapfv( GLenum map, GLsizei mapsize, const GLfloat * values );
extern void REPLICATESPU_APIENTRY replicatespu_PixelMapuiv( GLenum map, GLsizei mapsize, const GLuint * values );
extern void REPLICATESPU_APIENTRY replicatespu_PixelMapusv( GLenum map, GLsizei mapsize, const GLushort * values );
extern void REPLICATESPU_APIENTRY replicatespu_PixelStoref( GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_PixelStorei( GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_PixelTransferf( GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_PixelTransferi( GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_PixelZoom( GLfloat xfactor, GLfloat yfactor );
extern void REPLICATESPU_APIENTRY replicatespu_PointParameterfARB( GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_PointParameterfvARB( GLenum pname, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_PointParameteri( GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_PointParameteriv( GLenum pname, const GLint * param );
extern void REPLICATESPU_APIENTRY replicatespu_PointSize( GLfloat size );
extern void REPLICATESPU_APIENTRY replicatespu_PolygonMode( GLenum face, GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_PolygonOffset( GLfloat factor, GLfloat units );
extern void REPLICATESPU_APIENTRY replicatespu_PolygonStipple( const GLubyte * mask );
extern void REPLICATESPU_APIENTRY replicatespu_PopAttrib( void );
extern void REPLICATESPU_APIENTRY replicatespu_PopClientAttrib( void );
extern void REPLICATESPU_APIENTRY replicatespu_PopMatrix( void );
extern void REPLICATESPU_APIENTRY replicatespu_PopName( void );
extern void REPLICATESPU_APIENTRY replicatespu_PrioritizeTextures( GLsizei n, const GLuint * textures, const GLclampf * priorities );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramEnvParameter4dARB( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramEnvParameter4dvARB( GLenum target, GLuint index, const GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramEnvParameter4fARB( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramEnvParameter4fvARB( GLenum target, GLuint index, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramLocalParameter4dARB( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramLocalParameter4dvARB( GLenum target, GLuint index, const GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramLocalParameter4fARB( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramLocalParameter4fvARB( GLenum target, GLuint index, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramNamedParameter4dNV( GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramNamedParameter4dvNV( GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramNamedParameter4fNV( GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramNamedParameter4fvNV( GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramParameter4dNV( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramParameter4dvNV( GLenum target, GLuint index, const GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramParameter4fNV( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramParameter4fvNV( GLenum target, GLuint index, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramParameters4dvNV( GLenum target, GLuint index, GLuint num, const GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramParameters4fvNV( GLenum target, GLuint index, GLuint num, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_ProgramStringARB( GLenum target, GLenum format, GLsizei len, const GLvoid * string );
extern void REPLICATESPU_APIENTRY replicatespu_PushAttrib( GLbitfield mask );
extern void REPLICATESPU_APIENTRY replicatespu_PushClientAttrib( GLbitfield mask );
extern void REPLICATESPU_APIENTRY replicatespu_PushMatrix( void );
extern void REPLICATESPU_APIENTRY replicatespu_PushName( GLuint name );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos2d( GLdouble x, GLdouble y );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos2dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos2f( GLfloat x, GLfloat y );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos2fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos2i( GLint x, GLint y );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos2iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos2s( GLshort x, GLshort y );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos2sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos3d( GLdouble x, GLdouble y, GLdouble z );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos3dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos3f( GLfloat x, GLfloat y, GLfloat z );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos3fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos3i( GLint x, GLint y, GLint z );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos3iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos3s( GLshort x, GLshort y, GLshort z );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos3sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos4dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos4fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos4i( GLint x, GLint y, GLint z, GLint w );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos4iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w );
extern void REPLICATESPU_APIENTRY replicatespu_RasterPos4sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_ReadBuffer( GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_ReadPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid * pixels );
extern void REPLICATESPU_APIENTRY replicatespu_Rectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
extern void REPLICATESPU_APIENTRY replicatespu_Rectdv( const GLdouble * v1, const GLdouble * v2 );
extern void REPLICATESPU_APIENTRY replicatespu_Rectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
extern void REPLICATESPU_APIENTRY replicatespu_Rectfv( const GLfloat * v1, const GLfloat * v2 );
extern void REPLICATESPU_APIENTRY replicatespu_Recti( GLint x1, GLint y1, GLint x2, GLint y2 );
extern void REPLICATESPU_APIENTRY replicatespu_Rectiv( const GLint * v1, const GLint * v2 );
extern void REPLICATESPU_APIENTRY replicatespu_Rects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
extern void REPLICATESPU_APIENTRY replicatespu_Rectsv( const GLshort * v1, const GLshort * v2 );
extern GLint REPLICATESPU_APIENTRY replicatespu_RenderMode( GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_RequestResidentProgramsNV( GLsizei n, const GLuint * ids );
extern void REPLICATESPU_APIENTRY replicatespu_Rotated( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
extern void REPLICATESPU_APIENTRY replicatespu_Rotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
extern void REPLICATESPU_APIENTRY replicatespu_SampleCoverageARB( GLclampf value, GLboolean invert );
extern void REPLICATESPU_APIENTRY replicatespu_Scaled( GLdouble x, GLdouble y, GLdouble z );
extern void REPLICATESPU_APIENTRY replicatespu_Scalef( GLfloat x, GLfloat y, GLfloat z );
extern void REPLICATESPU_APIENTRY replicatespu_Scissor( GLint x, GLint y, GLsizei width, GLsizei height );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3bEXT( GLbyte red, GLbyte green, GLbyte blue );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3bvEXT( const GLbyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3dEXT( GLdouble red, GLdouble green, GLdouble blue );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3dvEXT( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3fEXT( GLfloat red, GLfloat green, GLfloat blue );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3fvEXT( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3iEXT( GLint red, GLint green, GLint blue );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3ivEXT( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3sEXT( GLshort red, GLshort green, GLshort blue );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3svEXT( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3ubEXT( GLubyte red, GLubyte green, GLubyte blue );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3ubvEXT( const GLubyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3uiEXT( GLuint red, GLuint green, GLuint blue );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3uivEXT( const GLuint * v );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3usEXT( GLushort red, GLushort green, GLushort blue );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColor3usvEXT( const GLushort * v );
extern void REPLICATESPU_APIENTRY replicatespu_SecondaryColorPointerEXT( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_SemaphoreCreateCR( GLuint name, GLuint count );
extern void REPLICATESPU_APIENTRY replicatespu_SemaphorePCR( GLuint name );
extern void REPLICATESPU_APIENTRY replicatespu_SemaphoreVCR( GLuint name );
extern void REPLICATESPU_APIENTRY replicatespu_SetFenceNV( GLuint fence, GLenum condition );
extern void REPLICATESPU_APIENTRY replicatespu_ShadeModel( GLenum mode );
extern void REPLICATESPU_APIENTRY replicatespu_StencilFunc( GLenum func, GLint ref, GLuint mask );
extern void REPLICATESPU_APIENTRY replicatespu_StencilMask( GLuint mask );
extern void REPLICATESPU_APIENTRY replicatespu_StencilOp( GLenum fail, GLenum zfail, GLenum zpass );
extern void REPLICATESPU_APIENTRY replicatespu_SwapBuffers( GLint window, GLint flags );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_TestFenceNV( GLuint fence );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord1d( GLdouble s );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord1dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord1f( GLfloat s );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord1fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord1i( GLint s );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord1iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord1s( GLshort s );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord1sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord2d( GLdouble s, GLdouble t );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord2dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord2f( GLfloat s, GLfloat t );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord2fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord2i( GLint s, GLint t );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord2iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord2s( GLshort s, GLshort t );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord2sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord3d( GLdouble s, GLdouble t, GLdouble r );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord3dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord3f( GLfloat s, GLfloat t, GLfloat r );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord3fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord3i( GLint s, GLint t, GLint r );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord3iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord3s( GLshort s, GLshort t, GLshort r );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord3sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord4dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord4fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord4i( GLint s, GLint t, GLint r, GLint q );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord4iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoord4sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_TexCoordPointer( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_TexEnvf( GLenum target, GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_TexEnvfv( GLenum target, GLenum pname, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_TexEnvi( GLenum target, GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_TexEnviv( GLenum target, GLenum pname, const GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_TexGend( GLenum coord, GLenum pname, GLdouble param );
extern void REPLICATESPU_APIENTRY replicatespu_TexGendv( GLenum coord, GLenum pname, const GLdouble * params );
extern void REPLICATESPU_APIENTRY replicatespu_TexGenf( GLenum coord, GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_TexGenfv( GLenum coord, GLenum pname, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_TexGeni( GLenum coord, GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_TexGeniv( GLenum coord, GLenum pname, const GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_TexImage1D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels );
extern void REPLICATESPU_APIENTRY replicatespu_TexImage2D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels );
extern void REPLICATESPU_APIENTRY replicatespu_TexImage3D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels );
extern void REPLICATESPU_APIENTRY replicatespu_TexImage3DEXT( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels );
extern void REPLICATESPU_APIENTRY replicatespu_TexParameterf( GLenum target, GLenum pname, GLfloat param );
extern void REPLICATESPU_APIENTRY replicatespu_TexParameterfv( GLenum target, GLenum pname, const GLfloat * params );
extern void REPLICATESPU_APIENTRY replicatespu_TexParameteri( GLenum target, GLenum pname, GLint param );
extern void REPLICATESPU_APIENTRY replicatespu_TexParameteriv( GLenum target, GLenum pname, const GLint * params );
extern void REPLICATESPU_APIENTRY replicatespu_TexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels );
extern void REPLICATESPU_APIENTRY replicatespu_TexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels );
extern void REPLICATESPU_APIENTRY replicatespu_TexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels );
extern void REPLICATESPU_APIENTRY replicatespu_TrackMatrixNV( GLenum target, GLuint address, GLenum matrix, GLenum transform );
extern void REPLICATESPU_APIENTRY replicatespu_Translated( GLdouble x, GLdouble y, GLdouble z );
extern void REPLICATESPU_APIENTRY replicatespu_Translatef( GLfloat x, GLfloat y, GLfloat z );
extern GLboolean REPLICATESPU_APIENTRY replicatespu_UnmapBufferARB( GLenum target );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex2d( GLdouble x, GLdouble y );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex2dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex2f( GLfloat x, GLfloat y );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex2fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex2i( GLint x, GLint y );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex2iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex2s( GLshort x, GLshort y );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex2sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex3d( GLdouble x, GLdouble y, GLdouble z );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex3dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex3f( GLfloat x, GLfloat y, GLfloat z );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex3fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex3i( GLint x, GLint y, GLint z );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex3iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex3s( GLshort x, GLshort y, GLshort z );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex3sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex4dv( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex4fv( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex4i( GLint x, GLint y, GLint z, GLint w );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex4iv( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex4s( GLshort x, GLshort y, GLshort z, GLshort w );
extern void REPLICATESPU_APIENTRY replicatespu_Vertex4sv( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexArrayRangeNV( GLsizei length, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib1dARB( GLuint index, GLdouble x );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib1dvARB( GLuint index, const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib1fARB( GLuint index, GLfloat x );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib1fvARB( GLuint index, const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib1sARB( GLuint index, GLshort x );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib1svARB( GLuint index, const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib2dARB( GLuint index, GLdouble x, GLdouble y );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib2dvARB( GLuint index, const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib2fARB( GLuint index, GLfloat x, GLfloat y );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib2fvARB( GLuint index, const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib2sARB( GLuint index, GLshort x, GLshort y );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib2svARB( GLuint index, const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib3dARB( GLuint index, GLdouble x, GLdouble y, GLdouble z );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib3dvARB( GLuint index, const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib3fARB( GLuint index, GLfloat x, GLfloat y, GLfloat z );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib3fvARB( GLuint index, const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib3sARB( GLuint index, GLshort x, GLshort y, GLshort z );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib3svARB( GLuint index, const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4NbvARB( GLuint index, const GLbyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4NivARB( GLuint index, const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4NsvARB( GLuint index, const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4NubARB( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4NubvARB( GLuint index, const GLubyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4NuivARB( GLuint index, const GLuint * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4NusvARB( GLuint index, const GLushort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4bvARB( GLuint index, const GLbyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4dARB( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4dvARB( GLuint index, const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4fARB( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4fvARB( GLuint index, const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4ivARB( GLuint index, const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4sARB( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4svARB( GLuint index, const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4ubvARB( GLuint index, const GLubyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4uivARB( GLuint index, const GLuint * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttrib4usvARB( GLuint index, const GLushort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribPointerARB( GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribPointerNV( GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs1dvNV( GLuint index, GLsizei n, const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs1fvNV( GLuint index, GLsizei n, const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs1svNV( GLuint index, GLsizei n, const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs2dvNV( GLuint index, GLsizei n, const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs2fvNV( GLuint index, GLsizei n, const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs2svNV( GLuint index, GLsizei n, const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs3dvNV( GLuint index, GLsizei n, const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs3fvNV( GLuint index, GLsizei n, const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs3svNV( GLuint index, GLsizei n, const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs4dvNV( GLuint index, GLsizei n, const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs4fvNV( GLuint index, GLsizei n, const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs4svNV( GLuint index, GLsizei n, const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexAttribs4ubvNV( GLuint index, GLsizei n, const GLubyte * v );
extern void REPLICATESPU_APIENTRY replicatespu_VertexPointer( GLint size, GLenum type, GLsizei stride, const GLvoid * pointer );
extern void REPLICATESPU_APIENTRY replicatespu_Viewport( GLint x, GLint y, GLsizei width, GLsizei height );
extern GLint REPLICATESPU_APIENTRY replicatespu_WindowCreate( const char * dpyName, GLint visBits );
extern void REPLICATESPU_APIENTRY replicatespu_WindowDestroy( GLint window );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos2dARB( GLdouble x, GLdouble y );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos2dvARB( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos2fARB( GLfloat x, GLfloat y );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos2fvARB( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos2iARB( GLint x, GLint y );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos2ivARB( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos2sARB( GLshort x, GLshort y );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos2svARB( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos3dARB( GLdouble x, GLdouble y, GLdouble z );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos3dvARB( const GLdouble * v );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos3fARB( GLfloat x, GLfloat y, GLfloat z );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos3fvARB( const GLfloat * v );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos3iARB( GLint x, GLint y, GLint z );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos3ivARB( const GLint * v );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos3sARB( GLshort x, GLshort y, GLshort z );
extern void REPLICATESPU_APIENTRY replicatespu_WindowPos3svARB( const GLshort * v );
extern void REPLICATESPU_APIENTRY replicatespu_WindowSize( GLint window, GLint w, GLint h );
extern void REPLICATESPU_APIENTRY replicatespu_ZPixCR( GLsizei width, GLsizei height, GLenum format, GLenum type, GLenum ztype, GLint zparm, GLint length, const GLvoid * pixels );

#endif

