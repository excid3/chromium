# Copyright (c) 2001, Stanford University
# All rights reserved.
#
# See the file LICENSE.txt for information on redistributing this software.

import sys

sys.path.append( "../../glapi_parser" )
import apiutil


keys = apiutil.GetDispatchedFunctions("../../glapi_parser/APIspec.txt")


apiutil.CopyrightC()

print """/* DO NOT EDIT - AUTOMATICALLY GENERATED BY replicatespu_beginend.py */
#include "replicatespu.h"
#include "cr_packfunctions.h"
#include "replicatespu_proto.h"

void REPLICATESPU_APIENTRY replicatespu_Begin( GLenum mode )
{
	GET_THREAD(thread);
	CRPackBuffer *buf = &thread->BeginEndBuffer;

	CRASSERT( mode >= GL_POINTS && mode <= GL_POLYGON );

	if (thread->currentContext->displayListMode != GL_FALSE) {
		crDLMCompileBegin(mode);
	}
	if (replicate_spu.swap)
	{
		crPackBeginSWAP( mode );
	}
	else
	{
		crPackBegin( mode );
	}

	if ( thread->server.conn->Barf ) {
		thread->BeginEndMode = mode;
		thread->BeginEndState = -1;
		if ( mode == GL_LINES || mode == GL_TRIANGLES || mode == GL_QUADS || mode == GL_POLYGON )
		{
			CRASSERT(!buf->pack);

			crPackReleaseBuffer( thread->packer );
			buf->pack = crNetAlloc( thread->server.conn );
			crPackInitBuffer( buf, buf->pack, thread->server.conn->buffer_size, thread->server.conn->mtu );
			buf->holds_BeginEnd = 1;
			buf->in_BeginEnd = 1;
			crPackSetBuffer( thread->packer, buf );

			thread->BeginEndState = 0;
		}
	}
}

void REPLICATESPU_APIENTRY replicatespu_End( void )
{
	GET_THREAD(thread);
	CRPackBuffer *buf = &thread->BeginEndBuffer;

	if ( thread->server.conn->Barf &&
		(thread->BeginEndMode == GL_LINES
		|| thread->BeginEndMode == GL_TRIANGLES
		|| thread->BeginEndMode == GL_QUADS
		|| thread->BeginEndMode == GL_POLYGON ) )
	{
		CRASSERT(buf->pack);

		crPackReleaseBuffer( thread->packer );
		crPackSetBuffer( thread->packer, &thread->normBuffer );
		if ( !crPackCanHoldBuffer( buf ) )
			replicatespuFlush( (void *) thread );

		crPackAppendBuffer( buf );
		crNetFree( thread->server.conn, buf->pack );
		buf->pack = NULL;
	}

	if (thread->currentContext->displayListMode != GL_FALSE) {
		crDLMCompileEnd();
	}
	if (replicate_spu.swap)
	{
		crPackEndSWAP();
	}
	else
	{
		crPackEnd();
	}
}

static void DoVertex( void )
{
	GET_THREAD(thread);
	CRPackBuffer *buf = &thread->BeginEndBuffer;
	CRPackBuffer *gbuf = &thread->normBuffer;
	int num_data;
	int num_opcode;

	/*crDebug( "really doing Vertex" );*/
	crPackReleaseBuffer( thread->packer );
	num_data = buf->data_current - buf->data_start;
	num_opcode = buf->opcode_start - buf->opcode_current;
	crPackSetBuffer( thread->packer, gbuf );
	if ( !crPackCanHoldBuffer( buf ) )
		/* doesn't hold, first flush gbuf*/
		replicatespuFlush( (void *) thread );

	crPackAppendBuffer( buf );
	crPackReleaseBuffer( thread->packer );
	crPackSetBuffer( thread->packer, buf );
	crPackResetPointers(thread->packer);
}

static void RunState( void )
{
	GET_THREAD(thread);
	if (! thread->server.conn->Barf ) return;
	if (thread->BeginEndState == -1) return;
	switch(thread->BeginEndMode) {
	case GL_POLYGON:
		return;
	case GL_LINES:
		if ((thread->BeginEndState + 1) % 2)
		{
			thread->BeginEndState = (thread->BeginEndState + 1) % 2;
			return;
		}
		break;
	case GL_TRIANGLES:
		if ((thread->BeginEndState + 1) % 3)
		{
			thread->BeginEndState = (thread->BeginEndState + 1) % 3;
			return;
		}
		break;
	case GL_QUADS:
		if ((thread->BeginEndState + 1) % 4)
		{
			thread->BeginEndState = (thread->BeginEndState + 1) % 4;
			return;
		}
		break;
	}
	DoVertex();
}
"""

for func_name in apiutil.AllSpecials( "replicatespu_vertex" ):
	return_type = apiutil.ReturnType(func_name)
	params = apiutil.Parameters(func_name)
	callstring = apiutil.MakeCallString(params)
	print 'void REPLICATESPU_APIENTRY replicatespu_%s( %s )' % ( func_name, apiutil.MakeDeclarationString( params ) )
	print '{'
	print '\tGET_THREAD(thread);'
	print '\tif (thread->currentContext->displayListMode != GL_FALSE) {'
	print '\t\tcrDLMCompile%s(%s);' % (func_name, callstring)
	print '\t}'
	print '\tif (replicate_spu.swap)'
	print '\t{'
	print '\t\tcrPack%sSWAP( %s );' % ( func_name, callstring )
	print '\t}'
	print '\telse'
	print '\t{'
	print '\t\tcrPack%s( %s );' % ( func_name, callstring)
	print '\t}'
	print '\tRunState();'
	print '}'
