#ifndef _DLM_DISPATCH_H

/* DO NOT EDIT.  This file is auto-generated by dlm_dispatch.py. */


/*** Accum ***/
struct instanceAccum {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum op;
	GLfloat value;
};
void DLM_APIENTRY crdlm_compile_Accum( GLenum op, GLfloat value );

/*** ActiveTextureARB ***/
struct instanceActiveTextureARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
};
void DLM_APIENTRY crdlm_compile_ActiveTextureARB( GLenum texture );

/*** AlphaFunc ***/
struct instanceAlphaFunc {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum func;
	GLclampf ref;
};
void DLM_APIENTRY crdlm_compile_AlphaFunc( GLenum func, GLclampf ref );

/*** AreProgramsResidentNV ***/

/*** AreTexturesResident ***/

/*** ArrayElement ***/
void DLM_APIENTRY crdlm_compile_ArrayElement( GLint i );

/*** BarrierCreateCR ***/

/*** BarrierDestroyCR ***/

/*** BarrierExecCR ***/

/*** Begin ***/
struct instanceBegin {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_Begin( GLenum mode );

/*** BeginQueryARB ***/
struct instanceBeginQueryARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint id;
};
void DLM_APIENTRY crdlm_compile_BeginQueryARB( GLenum target, GLuint id );

/*** BindBufferARB ***/

/*** BindProgramARB ***/
struct instanceBindProgramARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint program;
};
void DLM_APIENTRY crdlm_compile_BindProgramARB( GLenum target, GLuint program );

/*** BindProgramNV ***/
struct instanceBindProgramNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint id;
};
void DLM_APIENTRY crdlm_compile_BindProgramNV( GLenum target, GLuint id );

/*** BindTexture ***/
struct instanceBindTexture {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint texture;
};
void DLM_APIENTRY crdlm_compile_BindTexture( GLenum target, GLuint texture );

/*** Bitmap ***/
struct instanceBitmap {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLsizei width;
	GLsizei height;
	GLfloat xorig;
	GLfloat yorig;
	GLfloat xmove;
	GLfloat ymove;
	GLubyte * bitmap;
	GLubyte bitmapData[1];
};
int crdlm_pointers_Bitmap(struct instanceBitmap *instance, GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap);
void DLM_APIENTRY crdlm_compile_Bitmap( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap );

/*** BlendColorEXT ***/
struct instanceBlendColorEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLclampf red;
	GLclampf green;
	GLclampf blue;
	GLclampf alpha;
};
void DLM_APIENTRY crdlm_compile_BlendColorEXT( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );

/*** BlendEquationEXT ***/
struct instanceBlendEquationEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_BlendEquationEXT( GLenum mode );

/*** BlendFunc ***/
struct instanceBlendFunc {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum sfactor;
	GLenum dfactor;
};
void DLM_APIENTRY crdlm_compile_BlendFunc( GLenum sfactor, GLenum dfactor );

/*** BlendFuncSeparateEXT ***/
struct instanceBlendFuncSeparateEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum sfactorRGB;
	GLenum dfactorRGB;
	GLenum sfactorA;
	GLenum dfactorA;
};
void DLM_APIENTRY crdlm_compile_BlendFuncSeparateEXT( GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorA, GLenum dfactorA );

/*** BoundsInfoCR ***/

/*** BufferDataARB ***/

/*** BufferSubDataARB ***/

/*** CallList ***/
struct instanceCallList {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint list;
};
void DLM_APIENTRY crdlm_compile_CallList( GLuint list );

/*** CallLists ***/
struct instanceCallLists {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLsizei n;
	GLenum type;
	GLvoid * lists;
	int listsData[1];
};
int crdlm_pointers_CallLists(struct instanceCallLists *instance, GLsizei n, GLenum type, const GLvoid * lists);
void DLM_APIENTRY crdlm_compile_CallLists( GLsizei n, GLenum type, const GLvoid * lists );

/*** ChromiumParameterfCR ***/

/*** ChromiumParameteriCR ***/

/*** ChromiumParametervCR ***/

/*** Clear ***/
struct instanceClear {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLbitfield mask;
};
void DLM_APIENTRY crdlm_compile_Clear( GLbitfield mask );

/*** ClearAccum ***/
struct instanceClearAccum {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat red;
	GLfloat green;
	GLfloat blue;
	GLfloat alpha;
};
void DLM_APIENTRY crdlm_compile_ClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );

/*** ClearColor ***/
struct instanceClearColor {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLclampf red;
	GLclampf green;
	GLclampf blue;
	GLclampf alpha;
};
void DLM_APIENTRY crdlm_compile_ClearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );

/*** ClearDepth ***/
struct instanceClearDepth {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLclampd depth;
};
void DLM_APIENTRY crdlm_compile_ClearDepth( GLclampd depth );

/*** ClearIndex ***/
struct instanceClearIndex {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat c;
};
void DLM_APIENTRY crdlm_compile_ClearIndex( GLfloat c );

/*** ClearStencil ***/
struct instanceClearStencil {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint s;
};
void DLM_APIENTRY crdlm_compile_ClearStencil( GLint s );

/*** ClientActiveTextureARB ***/

/*** ClipPlane ***/
struct instanceClipPlane {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum plane;
	GLdouble * equation;
	GLdouble equationData[4];
};
void DLM_APIENTRY crdlm_compile_ClipPlane( GLenum plane, const GLdouble * equation );

/*** Color3b ***/
struct instanceColor3b {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLbyte red;
	GLbyte green;
	GLbyte blue;
};
void DLM_APIENTRY crdlm_compile_Color3b( GLbyte red, GLbyte green, GLbyte blue );

/*** Color3bv ***/
struct instanceColor3bv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLbyte * v;
	GLbyte vData[3];
};
void DLM_APIENTRY crdlm_compile_Color3bv( const GLbyte * v );

/*** Color3d ***/
struct instanceColor3d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble red;
	GLdouble green;
	GLdouble blue;
};
void DLM_APIENTRY crdlm_compile_Color3d( GLdouble red, GLdouble green, GLdouble blue );

/*** Color3dv ***/
struct instanceColor3dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[3];
};
void DLM_APIENTRY crdlm_compile_Color3dv( const GLdouble * v );

/*** Color3f ***/
struct instanceColor3f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat red;
	GLfloat green;
	GLfloat blue;
};
void DLM_APIENTRY crdlm_compile_Color3f( GLfloat red, GLfloat green, GLfloat blue );

/*** Color3fv ***/
struct instanceColor3fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[3];
};
void DLM_APIENTRY crdlm_compile_Color3fv( const GLfloat * v );

/*** Color3i ***/
struct instanceColor3i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint red;
	GLint green;
	GLint blue;
};
void DLM_APIENTRY crdlm_compile_Color3i( GLint red, GLint green, GLint blue );

/*** Color3iv ***/
struct instanceColor3iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[3];
};
void DLM_APIENTRY crdlm_compile_Color3iv( const GLint * v );

/*** Color3s ***/
struct instanceColor3s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort red;
	GLshort green;
	GLshort blue;
};
void DLM_APIENTRY crdlm_compile_Color3s( GLshort red, GLshort green, GLshort blue );

/*** Color3sv ***/
struct instanceColor3sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[3];
};
void DLM_APIENTRY crdlm_compile_Color3sv( const GLshort * v );

/*** Color3ub ***/
struct instanceColor3ub {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLubyte red;
	GLubyte green;
	GLubyte blue;
};
void DLM_APIENTRY crdlm_compile_Color3ub( GLubyte red, GLubyte green, GLubyte blue );

/*** Color3ubv ***/
struct instanceColor3ubv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLubyte * v;
	GLubyte vData[3];
};
void DLM_APIENTRY crdlm_compile_Color3ubv( const GLubyte * v );

/*** Color3ui ***/
struct instanceColor3ui {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint red;
	GLuint green;
	GLuint blue;
};
void DLM_APIENTRY crdlm_compile_Color3ui( GLuint red, GLuint green, GLuint blue );

/*** Color3uiv ***/
struct instanceColor3uiv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint * v;
	GLuint vData[3];
};
void DLM_APIENTRY crdlm_compile_Color3uiv( const GLuint * v );

/*** Color3us ***/
struct instanceColor3us {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLushort red;
	GLushort green;
	GLushort blue;
};
void DLM_APIENTRY crdlm_compile_Color3us( GLushort red, GLushort green, GLushort blue );

/*** Color3usv ***/
struct instanceColor3usv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLushort * v;
	GLushort vData[3];
};
void DLM_APIENTRY crdlm_compile_Color3usv( const GLushort * v );

/*** Color4b ***/
struct instanceColor4b {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLbyte red;
	GLbyte green;
	GLbyte blue;
	GLbyte alpha;
};
void DLM_APIENTRY crdlm_compile_Color4b( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );

/*** Color4bv ***/
struct instanceColor4bv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLbyte * v;
	GLbyte vData[4];
};
void DLM_APIENTRY crdlm_compile_Color4bv( const GLbyte * v );

/*** Color4d ***/
struct instanceColor4d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble red;
	GLdouble green;
	GLdouble blue;
	GLdouble alpha;
};
void DLM_APIENTRY crdlm_compile_Color4d( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );

/*** Color4dv ***/
struct instanceColor4dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[4];
};
void DLM_APIENTRY crdlm_compile_Color4dv( const GLdouble * v );

/*** Color4f ***/
struct instanceColor4f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat red;
	GLfloat green;
	GLfloat blue;
	GLfloat alpha;
};
void DLM_APIENTRY crdlm_compile_Color4f( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );

/*** Color4fv ***/
struct instanceColor4fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[4];
};
void DLM_APIENTRY crdlm_compile_Color4fv( const GLfloat * v );

/*** Color4i ***/
struct instanceColor4i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint red;
	GLint green;
	GLint blue;
	GLint alpha;
};
void DLM_APIENTRY crdlm_compile_Color4i( GLint red, GLint green, GLint blue, GLint alpha );

/*** Color4iv ***/
struct instanceColor4iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[4];
};
void DLM_APIENTRY crdlm_compile_Color4iv( const GLint * v );

/*** Color4s ***/
struct instanceColor4s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort red;
	GLshort green;
	GLshort blue;
	GLshort alpha;
};
void DLM_APIENTRY crdlm_compile_Color4s( GLshort red, GLshort green, GLshort blue, GLshort alpha );

/*** Color4sv ***/
struct instanceColor4sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[4];
};
void DLM_APIENTRY crdlm_compile_Color4sv( const GLshort * v );

/*** Color4ub ***/
struct instanceColor4ub {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLubyte red;
	GLubyte green;
	GLubyte blue;
	GLubyte alpha;
};
void DLM_APIENTRY crdlm_compile_Color4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );

/*** Color4ubv ***/
struct instanceColor4ubv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLubyte * v;
	GLubyte vData[4];
};
void DLM_APIENTRY crdlm_compile_Color4ubv( const GLubyte * v );

/*** Color4ui ***/
struct instanceColor4ui {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint red;
	GLuint green;
	GLuint blue;
	GLuint alpha;
};
void DLM_APIENTRY crdlm_compile_Color4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha );

/*** Color4uiv ***/
struct instanceColor4uiv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint * v;
	GLuint vData[4];
};
void DLM_APIENTRY crdlm_compile_Color4uiv( const GLuint * v );

/*** Color4us ***/
struct instanceColor4us {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLushort red;
	GLushort green;
	GLushort blue;
	GLushort alpha;
};
void DLM_APIENTRY crdlm_compile_Color4us( GLushort red, GLushort green, GLushort blue, GLushort alpha );

/*** Color4usv ***/
struct instanceColor4usv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLushort * v;
	GLushort vData[4];
};
void DLM_APIENTRY crdlm_compile_Color4usv( const GLushort * v );

/*** ColorMask ***/
struct instanceColorMask {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLboolean red;
	GLboolean green;
	GLboolean blue;
	GLboolean alpha;
};
void DLM_APIENTRY crdlm_compile_ColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );

/*** ColorMaterial ***/
struct instanceColorMaterial {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum face;
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_ColorMaterial( GLenum face, GLenum mode );

/*** ColorPointer ***/

/*** CombinerInputNV ***/
struct instanceCombinerInputNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum stage;
	GLenum portion;
	GLenum variable;
	GLenum input;
	GLenum mapping;
	GLenum componentUsage;
};
void DLM_APIENTRY crdlm_compile_CombinerInputNV( GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );

/*** CombinerOutputNV ***/
struct instanceCombinerOutputNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum stage;
	GLenum portion;
	GLenum abOutput;
	GLenum cdOutput;
	GLenum sumOutput;
	GLenum scale;
	GLenum bias;
	GLboolean abDotProduct;
	GLboolean cdDotProduct;
	GLboolean muxSum;
};
void DLM_APIENTRY crdlm_compile_CombinerOutputNV( GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum );

/*** CombinerParameterfNV ***/
struct instanceCombinerParameterfNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLfloat param;
};
void DLM_APIENTRY crdlm_compile_CombinerParameterfNV( GLenum pname, GLfloat param );

/*** CombinerParameterfvNV ***/
struct instanceCombinerParameterfvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_CombinerParameterfvNV(struct instanceCombinerParameterfvNV *instance, GLenum pname, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_CombinerParameterfvNV( GLenum pname, const GLfloat * params );

/*** CombinerParameteriNV ***/
struct instanceCombinerParameteriNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLint param;
};
void DLM_APIENTRY crdlm_compile_CombinerParameteriNV( GLenum pname, GLint param );

/*** CombinerParameterivNV ***/
struct instanceCombinerParameterivNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLint * params;
	GLint paramsData[1];
};
int crdlm_pointers_CombinerParameterivNV(struct instanceCombinerParameterivNV *instance, GLenum pname, const GLint * params);
void DLM_APIENTRY crdlm_compile_CombinerParameterivNV( GLenum pname, const GLint * params );

/*** CombinerStageParameterfvNV ***/
struct instanceCombinerStageParameterfvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum stage;
	GLenum pname;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_CombinerStageParameterfvNV(struct instanceCombinerStageParameterfvNV *instance, GLenum stage, GLenum pname, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_CombinerStageParameterfvNV( GLenum stage, GLenum pname, const GLfloat * params );

/*** CompressedTexImage1DARB ***/
struct instanceCompressedTexImage1DARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLenum internalFormat;
	GLsizei width;
	GLint border;
	GLsizei imagesize;
	GLvoid * data;
	int dataData[1];
};
int crdlm_pointers_CompressedTexImage1DARB(struct instanceCompressedTexImage1DARB *instance, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLint border, GLsizei imagesize, const GLvoid * data);
int crdlm_checkpass_CompressedTexImage1DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLint border, GLsizei imagesize, const GLvoid * data);
void DLM_APIENTRY crdlm_compile_CompressedTexImage1DARB( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLint border, GLsizei imagesize, const GLvoid * data );

/*** CompressedTexImage2DARB ***/
struct instanceCompressedTexImage2DARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLenum internalFormat;
	GLsizei width;
	GLsizei height;
	GLint border;
	GLsizei imagesize;
	GLvoid * data;
	int dataData[1];
};
int crdlm_pointers_CompressedTexImage2DARB(struct instanceCompressedTexImage2DARB *instance, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLint border, GLsizei imagesize, const GLvoid * data);
int crdlm_checkpass_CompressedTexImage2DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLint border, GLsizei imagesize, const GLvoid * data);
void DLM_APIENTRY crdlm_compile_CompressedTexImage2DARB( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLint border, GLsizei imagesize, const GLvoid * data );

/*** CompressedTexImage3DARB ***/
struct instanceCompressedTexImage3DARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLenum internalFormat;
	GLsizei width;
	GLsizei height;
	GLsizei depth;
	GLint border;
	GLsizei imagesize;
	GLvoid * data;
	int dataData[1];
};
int crdlm_pointers_CompressedTexImage3DARB(struct instanceCompressedTexImage3DARB *instance, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imagesize, const GLvoid * data);
int crdlm_checkpass_CompressedTexImage3DARB(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imagesize, const GLvoid * data);
void DLM_APIENTRY crdlm_compile_CompressedTexImage3DARB( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imagesize, const GLvoid * data );

/*** CompressedTexSubImage1DARB ***/
struct instanceCompressedTexSubImage1DARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint xoffset;
	GLsizei width;
	GLenum format;
	GLsizei imagesize;
	GLvoid * data;
	int dataData[1];
};
int crdlm_pointers_CompressedTexSubImage1DARB(struct instanceCompressedTexSubImage1DARB *instance, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imagesize, const GLvoid * data);
void DLM_APIENTRY crdlm_compile_CompressedTexSubImage1DARB( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imagesize, const GLvoid * data );

/*** CompressedTexSubImage2DARB ***/
struct instanceCompressedTexSubImage2DARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint xoffset;
	GLint yoffset;
	GLsizei width;
	GLsizei height;
	GLenum format;
	GLsizei imagesize;
	GLvoid * data;
	int dataData[1];
};
int crdlm_pointers_CompressedTexSubImage2DARB(struct instanceCompressedTexSubImage2DARB *instance, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imagesize, const GLvoid * data);
void DLM_APIENTRY crdlm_compile_CompressedTexSubImage2DARB( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imagesize, const GLvoid * data );

/*** CompressedTexSubImage3DARB ***/
struct instanceCompressedTexSubImage3DARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint xoffset;
	GLint yoffset;
	GLint zoffset;
	GLsizei width;
	GLsizei height;
	GLsizei depth;
	GLenum format;
	GLsizei imagesize;
	GLvoid * data;
	int dataData[1];
};
int crdlm_pointers_CompressedTexSubImage3DARB(struct instanceCompressedTexSubImage3DARB *instance, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imagesize, const GLvoid * data);
void DLM_APIENTRY crdlm_compile_CompressedTexSubImage3DARB( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imagesize, const GLvoid * data );

/*** CopyPixels ***/
struct instanceCopyPixels {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
	GLsizei width;
	GLsizei height;
	GLenum type;
};
void DLM_APIENTRY crdlm_compile_CopyPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );

/*** CopyTexImage1D ***/
struct instanceCopyTexImage1D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLenum internalFormat;
	GLint x;
	GLint y;
	GLsizei width;
	GLint border;
};
void DLM_APIENTRY crdlm_compile_CopyTexImage1D( GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border );

/*** CopyTexImage2D ***/
struct instanceCopyTexImage2D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLenum internalFormat;
	GLint x;
	GLint y;
	GLsizei width;
	GLsizei height;
	GLint border;
};
void DLM_APIENTRY crdlm_compile_CopyTexImage2D( GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );

/*** CopyTexSubImage1D ***/
struct instanceCopyTexSubImage1D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint xoffset;
	GLint x;
	GLint y;
	GLsizei width;
};
void DLM_APIENTRY crdlm_compile_CopyTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );

/*** CopyTexSubImage2D ***/
struct instanceCopyTexSubImage2D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint xoffset;
	GLint yoffset;
	GLint x;
	GLint y;
	GLsizei width;
	GLsizei height;
};
void DLM_APIENTRY crdlm_compile_CopyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );

/*** CopyTexSubImage3D ***/
struct instanceCopyTexSubImage3D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint xoffset;
	GLint yoffset;
	GLint zoffset;
	GLint x;
	GLint y;
	GLsizei width;
	GLsizei height;
};
void DLM_APIENTRY crdlm_compile_CopyTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );

/*** CreateContext ***/

/*** CullFace ***/
struct instanceCullFace {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_CullFace( GLenum mode );

/*** DeleteBuffersARB ***/

/*** DeleteFencesNV ***/

/*** DeleteLists ***/

/*** DeleteProgramsARB ***/

/*** DeleteQueriesARB ***/

/*** DeleteTextures ***/

/*** DepthFunc ***/
struct instanceDepthFunc {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum func;
};
void DLM_APIENTRY crdlm_compile_DepthFunc( GLenum func );

/*** DepthMask ***/
struct instanceDepthMask {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLboolean flag;
};
void DLM_APIENTRY crdlm_compile_DepthMask( GLboolean flag );

/*** DepthRange ***/
struct instanceDepthRange {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLclampd zNear;
	GLclampd zFar;
};
void DLM_APIENTRY crdlm_compile_DepthRange( GLclampd zNear, GLclampd zFar );

/*** DestroyContext ***/

/*** Disable ***/
struct instanceDisable {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum cap;
};
void DLM_APIENTRY crdlm_compile_Disable( GLenum cap );

/*** DisableClientState ***/

/*** DisableVertexAttribArrayARB ***/

/*** DrawArrays ***/
void DLM_APIENTRY crdlm_compile_DrawArrays( GLenum mode, GLint first, GLsizei count );

/*** DrawBuffer ***/
struct instanceDrawBuffer {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_DrawBuffer( GLenum mode );

/*** DrawElements ***/
void DLM_APIENTRY crdlm_compile_DrawElements( GLenum mode, GLsizei count, GLenum type, const GLvoid * indices );

/*** DrawPixels ***/
struct instanceDrawPixels {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLsizei width;
	GLsizei height;
	GLenum format;
	GLenum type;
	GLvoid * pixels;
	int pixelsData[1];
};
int crdlm_pointers_DrawPixels(struct instanceDrawPixels *instance, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
void DLM_APIENTRY crdlm_compile_DrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels );

/*** DrawRangeElements ***/
void DLM_APIENTRY crdlm_compile_DrawRangeElements( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid * indices );

/*** EdgeFlag ***/
struct instanceEdgeFlag {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLboolean flag;
};
void DLM_APIENTRY crdlm_compile_EdgeFlag( GLboolean flag );

/*** EdgeFlagPointer ***/

/*** EdgeFlagv ***/
struct instanceEdgeFlagv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLboolean * flag;
	GLboolean flagData[1];
};
void DLM_APIENTRY crdlm_compile_EdgeFlagv( const GLboolean * flag );

/*** Enable ***/
struct instanceEnable {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum cap;
};
void DLM_APIENTRY crdlm_compile_Enable( GLenum cap );

/*** EnableClientState ***/

/*** EnableVertexAttribArrayARB ***/

/*** End ***/
struct instanceEnd {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
};
void DLM_APIENTRY crdlm_compile_End( void );

/*** EndList ***/

/*** EndQueryARB ***/
struct instanceEndQueryARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
};
void DLM_APIENTRY crdlm_compile_EndQueryARB( GLenum target );

/*** EvalCoord1d ***/
struct instanceEvalCoord1d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble u;
};
void DLM_APIENTRY crdlm_compile_EvalCoord1d( GLdouble u );

/*** EvalCoord1dv ***/
struct instanceEvalCoord1dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * u;
	GLdouble uData[1];
};
void DLM_APIENTRY crdlm_compile_EvalCoord1dv( const GLdouble * u );

/*** EvalCoord1f ***/
struct instanceEvalCoord1f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat u;
};
void DLM_APIENTRY crdlm_compile_EvalCoord1f( GLfloat u );

/*** EvalCoord1fv ***/
struct instanceEvalCoord1fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * u;
	GLfloat uData[1];
};
void DLM_APIENTRY crdlm_compile_EvalCoord1fv( const GLfloat * u );

/*** EvalCoord2d ***/
struct instanceEvalCoord2d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble u;
	GLdouble v;
};
void DLM_APIENTRY crdlm_compile_EvalCoord2d( GLdouble u, GLdouble v );

/*** EvalCoord2dv ***/
struct instanceEvalCoord2dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * u;
	GLdouble uData[2];
};
void DLM_APIENTRY crdlm_compile_EvalCoord2dv( const GLdouble * u );

/*** EvalCoord2f ***/
struct instanceEvalCoord2f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat u;
	GLfloat v;
};
void DLM_APIENTRY crdlm_compile_EvalCoord2f( GLfloat u, GLfloat v );

/*** EvalCoord2fv ***/
struct instanceEvalCoord2fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * u;
	GLfloat uData[2];
};
void DLM_APIENTRY crdlm_compile_EvalCoord2fv( const GLfloat * u );

/*** EvalMesh1 ***/
struct instanceEvalMesh1 {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum mode;
	GLint i1;
	GLint i2;
};
void DLM_APIENTRY crdlm_compile_EvalMesh1( GLenum mode, GLint i1, GLint i2 );

/*** EvalMesh2 ***/
struct instanceEvalMesh2 {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum mode;
	GLint i1;
	GLint i2;
	GLint j1;
	GLint j2;
};
void DLM_APIENTRY crdlm_compile_EvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );

/*** EvalPoint1 ***/
struct instanceEvalPoint1 {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint i;
};
void DLM_APIENTRY crdlm_compile_EvalPoint1( GLint i );

/*** EvalPoint2 ***/
struct instanceEvalPoint2 {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint i;
	GLint j;
};
void DLM_APIENTRY crdlm_compile_EvalPoint2( GLint i, GLint j );

/*** ExecuteProgramNV ***/
struct instanceExecuteProgramNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint id;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_ExecuteProgramNV(struct instanceExecuteProgramNV *instance, GLenum target, GLuint id, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_ExecuteProgramNV( GLenum target, GLuint id, const GLfloat * params );

/*** FeedbackBuffer ***/

/*** FinalCombinerInputNV ***/
struct instanceFinalCombinerInputNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum variable;
	GLenum input;
	GLenum mapping;
	GLenum componentUsage;
};
void DLM_APIENTRY crdlm_compile_FinalCombinerInputNV( GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage );

/*** Finish ***/

/*** FinishFenceNV ***/
struct instanceFinishFenceNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint fence;
};
void DLM_APIENTRY crdlm_compile_FinishFenceNV( GLuint fence );

/*** Flush ***/

/*** FlushVertexArrayRangeNV ***/

/*** FogCoordPointerEXT ***/

/*** FogCoorddEXT ***/
struct instanceFogCoorddEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble coord;
};
void DLM_APIENTRY crdlm_compile_FogCoorddEXT( GLdouble coord );

/*** FogCoorddvEXT ***/
struct instanceFogCoorddvEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * coord;
	GLdouble coordData[1];
};
void DLM_APIENTRY crdlm_compile_FogCoorddvEXT( const GLdouble * coord );

/*** FogCoordfEXT ***/
struct instanceFogCoordfEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat coord;
};
void DLM_APIENTRY crdlm_compile_FogCoordfEXT( GLfloat coord );

/*** FogCoordfvEXT ***/
struct instanceFogCoordfvEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * coord;
	GLfloat coordData[1];
};
void DLM_APIENTRY crdlm_compile_FogCoordfvEXT( const GLfloat * coord );

/*** Fogf ***/
struct instanceFogf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLfloat param;
};
void DLM_APIENTRY crdlm_compile_Fogf( GLenum pname, GLfloat param );

/*** Fogfv ***/
struct instanceFogfv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_Fogfv(struct instanceFogfv *instance, GLenum pname, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_Fogfv( GLenum pname, const GLfloat * params );

/*** Fogi ***/
struct instanceFogi {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLint param;
};
void DLM_APIENTRY crdlm_compile_Fogi( GLenum pname, GLint param );

/*** Fogiv ***/
struct instanceFogiv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLint * params;
	GLint paramsData[1];
};
int crdlm_pointers_Fogiv(struct instanceFogiv *instance, GLenum pname, const GLint * params);
void DLM_APIENTRY crdlm_compile_Fogiv( GLenum pname, const GLint * params );

/*** FrontFace ***/
struct instanceFrontFace {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_FrontFace( GLenum mode );

/*** Frustum ***/
struct instanceFrustum {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble left;
	GLdouble right;
	GLdouble bottom;
	GLdouble top;
	GLdouble zNear;
	GLdouble zFar;
};
void DLM_APIENTRY crdlm_compile_Frustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );

/*** GenBuffersARB ***/

/*** GenFencesNV ***/

/*** GenLists ***/

/*** GenProgramsARB ***/

/*** GenProgramsNV ***/

/*** GenQueriesARB ***/

/*** GenTextures ***/

/*** GetBooleanv ***/

/*** GetBufferParameterivARB ***/

/*** GetBufferPointervARB ***/

/*** GetBufferSubDataARB ***/

/*** GetChromiumParametervCR ***/

/*** GetClipPlane ***/

/*** GetCombinerInputParameterfvNV ***/

/*** GetCombinerInputParameterivNV ***/

/*** GetCombinerOutputParameterfvNV ***/

/*** GetCombinerOutputParameterivNV ***/

/*** GetCombinerStageParameterfvNV ***/

/*** GetCompressedTexImageARB ***/

/*** GetDoublev ***/

/*** GetError ***/

/*** GetFenceivNV ***/

/*** GetFinalCombinerInputParameterfvNV ***/

/*** GetFinalCombinerInputParameterivNV ***/

/*** GetFloatv ***/

/*** GetIntegerv ***/

/*** GetLightfv ***/

/*** GetLightiv ***/

/*** GetMapdv ***/

/*** GetMapfv ***/

/*** GetMapiv ***/

/*** GetMaterialfv ***/

/*** GetMaterialiv ***/

/*** GetPixelMapfv ***/

/*** GetPixelMapuiv ***/

/*** GetPixelMapusv ***/

/*** GetPointerv ***/

/*** GetPolygonStipple ***/

/*** GetProgramEnvParameterdvARB ***/

/*** GetProgramEnvParameterfvARB ***/

/*** GetProgramLocalParameterdvARB ***/

/*** GetProgramLocalParameterfvARB ***/

/*** GetProgramNamedParameterdvNV ***/

/*** GetProgramNamedParameterfvNV ***/

/*** GetProgramParameterdvNV ***/

/*** GetProgramParameterfvNV ***/

/*** GetProgramStringARB ***/

/*** GetProgramStringNV ***/

/*** GetProgramivARB ***/

/*** GetProgramivNV ***/

/*** GetQueryObjectivARB ***/

/*** GetQueryObjectuivARB ***/

/*** GetQueryivARB ***/

/*** GetString ***/

/*** GetTexEnvfv ***/

/*** GetTexEnviv ***/

/*** GetTexGendv ***/

/*** GetTexGenfv ***/

/*** GetTexGeniv ***/

/*** GetTexImage ***/

/*** GetTexLevelParameterfv ***/

/*** GetTexLevelParameteriv ***/

/*** GetTexParameterfv ***/

/*** GetTexParameteriv ***/

/*** GetTrackMatrixivNV ***/

/*** GetVertexAttribPointervARB ***/

/*** GetVertexAttribPointervNV ***/

/*** GetVertexAttribdvARB ***/

/*** GetVertexAttribdvNV ***/

/*** GetVertexAttribfvARB ***/

/*** GetVertexAttribfvNV ***/

/*** GetVertexAttribivARB ***/

/*** GetVertexAttribivNV ***/

/*** Hint ***/
struct instanceHint {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_Hint( GLenum target, GLenum mode );

/*** IndexMask ***/
struct instanceIndexMask {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint mask;
};
void DLM_APIENTRY crdlm_compile_IndexMask( GLuint mask );

/*** IndexPointer ***/

/*** Indexd ***/
struct instanceIndexd {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble c;
};
void DLM_APIENTRY crdlm_compile_Indexd( GLdouble c );

/*** Indexdv ***/
struct instanceIndexdv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * c;
	GLdouble cData[1];
};
void DLM_APIENTRY crdlm_compile_Indexdv( const GLdouble * c );

/*** Indexf ***/
struct instanceIndexf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat c;
};
void DLM_APIENTRY crdlm_compile_Indexf( GLfloat c );

/*** Indexfv ***/
struct instanceIndexfv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * c;
	GLfloat cData[1];
};
void DLM_APIENTRY crdlm_compile_Indexfv( const GLfloat * c );

/*** Indexi ***/
struct instanceIndexi {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint c;
};
void DLM_APIENTRY crdlm_compile_Indexi( GLint c );

/*** Indexiv ***/
struct instanceIndexiv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * c;
	GLint cData[1];
};
void DLM_APIENTRY crdlm_compile_Indexiv( const GLint * c );

/*** Indexs ***/
struct instanceIndexs {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort c;
};
void DLM_APIENTRY crdlm_compile_Indexs( GLshort c );

/*** Indexsv ***/
struct instanceIndexsv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * c;
	GLshort cData[1];
};
void DLM_APIENTRY crdlm_compile_Indexsv( const GLshort * c );

/*** Indexub ***/
struct instanceIndexub {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLubyte c;
};
void DLM_APIENTRY crdlm_compile_Indexub( GLubyte c );

/*** Indexubv ***/
struct instanceIndexubv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLubyte * c;
	GLubyte cData[1];
};
void DLM_APIENTRY crdlm_compile_Indexubv( const GLubyte * c );

/*** InitNames ***/
struct instanceInitNames {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
};
void DLM_APIENTRY crdlm_compile_InitNames( void );

/*** InterleavedArrays ***/

/*** IsBufferARB ***/

/*** IsEnabled ***/

/*** IsFenceNV ***/

/*** IsList ***/

/*** IsProgramARB ***/

/*** IsQueryARB ***/

/*** IsTexture ***/

/*** LightModelf ***/
struct instanceLightModelf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLfloat param;
};
void DLM_APIENTRY crdlm_compile_LightModelf( GLenum pname, GLfloat param );

/*** LightModelfv ***/
struct instanceLightModelfv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_LightModelfv(struct instanceLightModelfv *instance, GLenum pname, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_LightModelfv( GLenum pname, const GLfloat * params );

/*** LightModeli ***/
struct instanceLightModeli {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLint param;
};
void DLM_APIENTRY crdlm_compile_LightModeli( GLenum pname, GLint param );

/*** LightModeliv ***/
struct instanceLightModeliv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLint * params;
	GLint paramsData[1];
};
int crdlm_pointers_LightModeliv(struct instanceLightModeliv *instance, GLenum pname, const GLint * params);
void DLM_APIENTRY crdlm_compile_LightModeliv( GLenum pname, const GLint * params );

/*** Lightf ***/
struct instanceLightf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum light;
	GLenum pname;
	GLfloat param;
};
void DLM_APIENTRY crdlm_compile_Lightf( GLenum light, GLenum pname, GLfloat param );

/*** Lightfv ***/
struct instanceLightfv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum light;
	GLenum pname;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_Lightfv(struct instanceLightfv *instance, GLenum light, GLenum pname, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_Lightfv( GLenum light, GLenum pname, const GLfloat * params );

/*** Lighti ***/
struct instanceLighti {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum light;
	GLenum pname;
	GLint param;
};
void DLM_APIENTRY crdlm_compile_Lighti( GLenum light, GLenum pname, GLint param );

/*** Lightiv ***/
struct instanceLightiv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum light;
	GLenum pname;
	GLint * params;
	GLint paramsData[1];
};
int crdlm_pointers_Lightiv(struct instanceLightiv *instance, GLenum light, GLenum pname, const GLint * params);
void DLM_APIENTRY crdlm_compile_Lightiv( GLenum light, GLenum pname, const GLint * params );

/*** LineStipple ***/
struct instanceLineStipple {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint factor;
	GLushort pattern;
};
void DLM_APIENTRY crdlm_compile_LineStipple( GLint factor, GLushort pattern );

/*** LineWidth ***/
struct instanceLineWidth {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat width;
};
void DLM_APIENTRY crdlm_compile_LineWidth( GLfloat width );

/*** ListBase ***/
struct instanceListBase {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint base;
};
void DLM_APIENTRY crdlm_compile_ListBase( GLuint base );

/*** LoadIdentity ***/
struct instanceLoadIdentity {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
};
void DLM_APIENTRY crdlm_compile_LoadIdentity( void );

/*** LoadMatrixd ***/
struct instanceLoadMatrixd {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * m;
	GLdouble mData[16];
};
void DLM_APIENTRY crdlm_compile_LoadMatrixd( const GLdouble * m );

/*** LoadMatrixf ***/
struct instanceLoadMatrixf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * m;
	GLfloat mData[16];
};
void DLM_APIENTRY crdlm_compile_LoadMatrixf( const GLfloat * m );

/*** LoadName ***/
struct instanceLoadName {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint name;
};
void DLM_APIENTRY crdlm_compile_LoadName( GLuint name );

/*** LoadProgramNV ***/
struct instanceLoadProgramNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint id;
	GLsizei len;
	GLubyte * program;
	GLubyte programData[1];
};
int crdlm_pointers_LoadProgramNV(struct instanceLoadProgramNV *instance, GLenum target, GLuint id, GLsizei len, const GLubyte * program);
void DLM_APIENTRY crdlm_compile_LoadProgramNV( GLenum target, GLuint id, GLsizei len, const GLubyte * program );

/*** LoadTransposeMatrixdARB ***/
struct instanceLoadTransposeMatrixdARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * m;
	GLdouble mData[16];
};
void DLM_APIENTRY crdlm_compile_LoadTransposeMatrixdARB( const GLdouble * m );

/*** LoadTransposeMatrixfARB ***/
struct instanceLoadTransposeMatrixfARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * m;
	GLfloat mData[16];
};
void DLM_APIENTRY crdlm_compile_LoadTransposeMatrixfARB( const GLfloat * m );

/*** LogicOp ***/
struct instanceLogicOp {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum opcode;
};
void DLM_APIENTRY crdlm_compile_LogicOp( GLenum opcode );

/*** MakeCurrent ***/

/*** Map1d ***/
struct instanceMap1d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLdouble u1;
	GLdouble u2;
	GLint stride;
	GLint order;
	GLdouble * points;
	GLdouble pointsData[1];
};
int crdlm_pointers_Map1d(struct instanceMap1d *instance, GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points);
void DLM_APIENTRY crdlm_compile_Map1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points );

/*** Map1f ***/
struct instanceMap1f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLfloat u1;
	GLfloat u2;
	GLint stride;
	GLint order;
	GLfloat * points;
	GLfloat pointsData[1];
};
int crdlm_pointers_Map1f(struct instanceMap1f *instance, GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points);
void DLM_APIENTRY crdlm_compile_Map1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points );

/*** Map2d ***/
struct instanceMap2d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLdouble u1;
	GLdouble u2;
	GLint ustride;
	GLint uorder;
	GLdouble v1;
	GLdouble v2;
	GLint vstride;
	GLint vorder;
	GLdouble * points;
	GLdouble pointsData[1];
};
int crdlm_pointers_Map2d(struct instanceMap2d *instance, GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points);
void DLM_APIENTRY crdlm_compile_Map2d( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points );

/*** Map2f ***/
struct instanceMap2f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLfloat u1;
	GLfloat u2;
	GLint ustride;
	GLint uorder;
	GLfloat v1;
	GLfloat v2;
	GLint vstride;
	GLint vorder;
	GLfloat * points;
	GLfloat pointsData[1];
};
int crdlm_pointers_Map2f(struct instanceMap2f *instance, GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points);
void DLM_APIENTRY crdlm_compile_Map2f( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points );

/*** MapBufferARB ***/

/*** MapGrid1d ***/
struct instanceMapGrid1d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint un;
	GLdouble u1;
	GLdouble u2;
};
void DLM_APIENTRY crdlm_compile_MapGrid1d( GLint un, GLdouble u1, GLdouble u2 );

/*** MapGrid1f ***/
struct instanceMapGrid1f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint un;
	GLfloat u1;
	GLfloat u2;
};
void DLM_APIENTRY crdlm_compile_MapGrid1f( GLint un, GLfloat u1, GLfloat u2 );

/*** MapGrid2d ***/
struct instanceMapGrid2d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint un;
	GLdouble u1;
	GLdouble u2;
	GLint vn;
	GLdouble v1;
	GLdouble v2;
};
void DLM_APIENTRY crdlm_compile_MapGrid2d( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );

/*** MapGrid2f ***/
struct instanceMapGrid2f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint un;
	GLfloat u1;
	GLfloat u2;
	GLint vn;
	GLfloat v1;
	GLfloat v2;
};
void DLM_APIENTRY crdlm_compile_MapGrid2f( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );

/*** Materialf ***/
struct instanceMaterialf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum face;
	GLenum pname;
	GLfloat param;
};
void DLM_APIENTRY crdlm_compile_Materialf( GLenum face, GLenum pname, GLfloat param );

/*** Materialfv ***/
struct instanceMaterialfv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum face;
	GLenum pname;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_Materialfv(struct instanceMaterialfv *instance, GLenum face, GLenum pname, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_Materialfv( GLenum face, GLenum pname, const GLfloat * params );

/*** Materiali ***/
struct instanceMateriali {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum face;
	GLenum pname;
	GLint param;
};
void DLM_APIENTRY crdlm_compile_Materiali( GLenum face, GLenum pname, GLint param );

/*** Materialiv ***/
struct instanceMaterialiv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum face;
	GLenum pname;
	GLint * params;
	GLint paramsData[1];
};
int crdlm_pointers_Materialiv(struct instanceMaterialiv *instance, GLenum face, GLenum pname, const GLint * params);
void DLM_APIENTRY crdlm_compile_Materialiv( GLenum face, GLenum pname, const GLint * params );

/*** MatrixMode ***/
struct instanceMatrixMode {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_MatrixMode( GLenum mode );

/*** MultMatrixd ***/
struct instanceMultMatrixd {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * m;
	GLdouble mData[16];
};
void DLM_APIENTRY crdlm_compile_MultMatrixd( const GLdouble * m );

/*** MultMatrixf ***/
struct instanceMultMatrixf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * m;
	GLfloat mData[16];
};
void DLM_APIENTRY crdlm_compile_MultMatrixf( const GLfloat * m );

/*** MultTransposeMatrixdARB ***/
struct instanceMultTransposeMatrixdARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * m;
	GLdouble mData[16];
};
void DLM_APIENTRY crdlm_compile_MultTransposeMatrixdARB( const GLdouble * m );

/*** MultTransposeMatrixfARB ***/
struct instanceMultTransposeMatrixfARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * m;
	GLfloat mData[16];
};
void DLM_APIENTRY crdlm_compile_MultTransposeMatrixfARB( const GLfloat * m );

/*** MultiDrawArraysEXT ***/
void DLM_APIENTRY crdlm_compile_MultiDrawArraysEXT( GLenum mode, GLint * first, GLsizei * count, GLsizei primcount );

/*** MultiDrawElementsEXT ***/
void DLM_APIENTRY crdlm_compile_MultiDrawElementsEXT( GLenum mode, const GLsizei * count, GLenum type, const GLvoid ** indices, GLsizei primcount );

/*** MultiTexCoord1dARB ***/
struct instanceMultiTexCoord1dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLdouble s;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord1dARB( GLenum texture, GLdouble s );

/*** MultiTexCoord1dvARB ***/
struct instanceMultiTexCoord1dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLdouble * t;
	GLdouble tData[1];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord1dvARB( GLenum texture, const GLdouble * t );

/*** MultiTexCoord1fARB ***/
struct instanceMultiTexCoord1fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLfloat s;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord1fARB( GLenum texture, GLfloat s );

/*** MultiTexCoord1fvARB ***/
struct instanceMultiTexCoord1fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLfloat * t;
	GLfloat tData[1];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord1fvARB( GLenum texture, const GLfloat * t );

/*** MultiTexCoord1iARB ***/
struct instanceMultiTexCoord1iARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLint s;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord1iARB( GLenum texture, GLint s );

/*** MultiTexCoord1ivARB ***/
struct instanceMultiTexCoord1ivARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLint * t;
	GLint tData[1];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord1ivARB( GLenum texture, const GLint * t );

/*** MultiTexCoord1sARB ***/
struct instanceMultiTexCoord1sARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLshort s;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord1sARB( GLenum texture, GLshort s );

/*** MultiTexCoord1svARB ***/
struct instanceMultiTexCoord1svARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLshort * t;
	GLshort tData[1];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord1svARB( GLenum texture, const GLshort * t );

/*** MultiTexCoord2dARB ***/
struct instanceMultiTexCoord2dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLdouble s;
	GLdouble t;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord2dARB( GLenum texture, GLdouble s, GLdouble t );

/*** MultiTexCoord2dvARB ***/
struct instanceMultiTexCoord2dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLdouble * t;
	GLdouble tData[2];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord2dvARB( GLenum texture, const GLdouble * t );

/*** MultiTexCoord2fARB ***/
struct instanceMultiTexCoord2fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLfloat s;
	GLfloat t;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord2fARB( GLenum texture, GLfloat s, GLfloat t );

/*** MultiTexCoord2fvARB ***/
struct instanceMultiTexCoord2fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLfloat * t;
	GLfloat tData[2];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord2fvARB( GLenum texture, const GLfloat * t );

/*** MultiTexCoord2iARB ***/
struct instanceMultiTexCoord2iARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLint s;
	GLint t;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord2iARB( GLenum texture, GLint s, GLint t );

/*** MultiTexCoord2ivARB ***/
struct instanceMultiTexCoord2ivARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLint * t;
	GLint tData[2];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord2ivARB( GLenum texture, const GLint * t );

/*** MultiTexCoord2sARB ***/
struct instanceMultiTexCoord2sARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLshort s;
	GLshort t;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord2sARB( GLenum texture, GLshort s, GLshort t );

/*** MultiTexCoord2svARB ***/
struct instanceMultiTexCoord2svARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLshort * t;
	GLshort tData[2];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord2svARB( GLenum texture, const GLshort * t );

/*** MultiTexCoord3dARB ***/
struct instanceMultiTexCoord3dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLdouble s;
	GLdouble t;
	GLdouble r;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord3dARB( GLenum texture, GLdouble s, GLdouble t, GLdouble r );

/*** MultiTexCoord3dvARB ***/
struct instanceMultiTexCoord3dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLdouble * t;
	GLdouble tData[3];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord3dvARB( GLenum texture, const GLdouble * t );

/*** MultiTexCoord3fARB ***/
struct instanceMultiTexCoord3fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLfloat s;
	GLfloat t;
	GLfloat r;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord3fARB( GLenum texture, GLfloat s, GLfloat t, GLfloat r );

/*** MultiTexCoord3fvARB ***/
struct instanceMultiTexCoord3fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLfloat * t;
	GLfloat tData[3];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord3fvARB( GLenum texture, const GLfloat * t );

/*** MultiTexCoord3iARB ***/
struct instanceMultiTexCoord3iARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLint s;
	GLint t;
	GLint r;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord3iARB( GLenum texture, GLint s, GLint t, GLint r );

/*** MultiTexCoord3ivARB ***/
struct instanceMultiTexCoord3ivARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLint * t;
	GLint tData[3];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord3ivARB( GLenum texture, const GLint * t );

/*** MultiTexCoord3sARB ***/
struct instanceMultiTexCoord3sARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLshort s;
	GLshort t;
	GLshort r;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord3sARB( GLenum texture, GLshort s, GLshort t, GLshort r );

/*** MultiTexCoord3svARB ***/
struct instanceMultiTexCoord3svARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLshort * t;
	GLshort tData[3];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord3svARB( GLenum texture, const GLshort * t );

/*** MultiTexCoord4dARB ***/
struct instanceMultiTexCoord4dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLdouble s;
	GLdouble t;
	GLdouble r;
	GLdouble q;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord4dARB( GLenum texture, GLdouble s, GLdouble t, GLdouble r, GLdouble q );

/*** MultiTexCoord4dvARB ***/
struct instanceMultiTexCoord4dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLdouble * t;
	GLdouble tData[4];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord4dvARB( GLenum texture, const GLdouble * t );

/*** MultiTexCoord4fARB ***/
struct instanceMultiTexCoord4fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLfloat s;
	GLfloat t;
	GLfloat r;
	GLfloat q;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord4fARB( GLenum texture, GLfloat s, GLfloat t, GLfloat r, GLfloat q );

/*** MultiTexCoord4fvARB ***/
struct instanceMultiTexCoord4fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLfloat * t;
	GLfloat tData[4];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord4fvARB( GLenum texture, const GLfloat * t );

/*** MultiTexCoord4iARB ***/
struct instanceMultiTexCoord4iARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLint s;
	GLint t;
	GLint r;
	GLint q;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord4iARB( GLenum texture, GLint s, GLint t, GLint r, GLint q );

/*** MultiTexCoord4ivARB ***/
struct instanceMultiTexCoord4ivARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLint * t;
	GLint tData[4];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord4ivARB( GLenum texture, const GLint * t );

/*** MultiTexCoord4sARB ***/
struct instanceMultiTexCoord4sARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLshort s;
	GLshort t;
	GLshort r;
	GLshort q;
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord4sARB( GLenum texture, GLshort s, GLshort t, GLshort r, GLshort q );

/*** MultiTexCoord4svARB ***/
struct instanceMultiTexCoord4svARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum texture;
	GLshort * t;
	GLshort tData[4];
};
void DLM_APIENTRY crdlm_compile_MultiTexCoord4svARB( GLenum texture, const GLshort * t );

/*** NewList ***/

/*** Normal3b ***/
struct instanceNormal3b {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLbyte nx;
	GLbyte ny;
	GLbyte nz;
};
void DLM_APIENTRY crdlm_compile_Normal3b( GLbyte nx, GLbyte ny, GLbyte nz );

/*** Normal3bv ***/
struct instanceNormal3bv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLbyte * v;
	GLbyte vData[3];
};
void DLM_APIENTRY crdlm_compile_Normal3bv( const GLbyte * v );

/*** Normal3d ***/
struct instanceNormal3d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble nx;
	GLdouble ny;
	GLdouble nz;
};
void DLM_APIENTRY crdlm_compile_Normal3d( GLdouble nx, GLdouble ny, GLdouble nz );

/*** Normal3dv ***/
struct instanceNormal3dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[3];
};
void DLM_APIENTRY crdlm_compile_Normal3dv( const GLdouble * v );

/*** Normal3f ***/
struct instanceNormal3f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat nx;
	GLfloat ny;
	GLfloat nz;
};
void DLM_APIENTRY crdlm_compile_Normal3f( GLfloat nx, GLfloat ny, GLfloat nz );

/*** Normal3fv ***/
struct instanceNormal3fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[3];
};
void DLM_APIENTRY crdlm_compile_Normal3fv( const GLfloat * v );

/*** Normal3i ***/
struct instanceNormal3i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint nx;
	GLint ny;
	GLint nz;
};
void DLM_APIENTRY crdlm_compile_Normal3i( GLint nx, GLint ny, GLint nz );

/*** Normal3iv ***/
struct instanceNormal3iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[3];
};
void DLM_APIENTRY crdlm_compile_Normal3iv( const GLint * v );

/*** Normal3s ***/
struct instanceNormal3s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort nx;
	GLshort ny;
	GLshort nz;
};
void DLM_APIENTRY crdlm_compile_Normal3s( GLshort nx, GLshort ny, GLshort nz );

/*** Normal3sv ***/
struct instanceNormal3sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[3];
};
void DLM_APIENTRY crdlm_compile_Normal3sv( const GLshort * v );

/*** NormalPointer ***/

/*** Ortho ***/
struct instanceOrtho {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble left;
	GLdouble right;
	GLdouble bottom;
	GLdouble top;
	GLdouble zNear;
	GLdouble zFar;
};
void DLM_APIENTRY crdlm_compile_Ortho( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar );

/*** PassThrough ***/
struct instancePassThrough {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat token;
};
void DLM_APIENTRY crdlm_compile_PassThrough( GLfloat token );

/*** PixelMapfv ***/
struct instancePixelMapfv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum map;
	GLsizei mapsize;
	GLfloat * values;
	GLfloat valuesData[1];
};
int crdlm_pointers_PixelMapfv(struct instancePixelMapfv *instance, GLenum map, GLsizei mapsize, const GLfloat * values);
void DLM_APIENTRY crdlm_compile_PixelMapfv( GLenum map, GLsizei mapsize, const GLfloat * values );

/*** PixelMapuiv ***/
struct instancePixelMapuiv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum map;
	GLsizei mapsize;
	GLuint * values;
	GLuint valuesData[1];
};
int crdlm_pointers_PixelMapuiv(struct instancePixelMapuiv *instance, GLenum map, GLsizei mapsize, const GLuint * values);
void DLM_APIENTRY crdlm_compile_PixelMapuiv( GLenum map, GLsizei mapsize, const GLuint * values );

/*** PixelMapusv ***/
struct instancePixelMapusv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum map;
	GLsizei mapsize;
	GLushort * values;
	GLushort valuesData[1];
};
int crdlm_pointers_PixelMapusv(struct instancePixelMapusv *instance, GLenum map, GLsizei mapsize, const GLushort * values);
void DLM_APIENTRY crdlm_compile_PixelMapusv( GLenum map, GLsizei mapsize, const GLushort * values );

/*** PixelStoref ***/

/*** PixelStorei ***/

/*** PixelTransferf ***/
struct instancePixelTransferf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLfloat param;
};
void DLM_APIENTRY crdlm_compile_PixelTransferf( GLenum pname, GLfloat param );

/*** PixelTransferi ***/
struct instancePixelTransferi {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLint param;
};
void DLM_APIENTRY crdlm_compile_PixelTransferi( GLenum pname, GLint param );

/*** PixelZoom ***/
struct instancePixelZoom {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat xfactor;
	GLfloat yfactor;
};
void DLM_APIENTRY crdlm_compile_PixelZoom( GLfloat xfactor, GLfloat yfactor );

/*** PointParameterfARB ***/
struct instancePointParameterfARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLfloat param;
};
void DLM_APIENTRY crdlm_compile_PointParameterfARB( GLenum pname, GLfloat param );

/*** PointParameterfvARB ***/
struct instancePointParameterfvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_PointParameterfvARB(struct instancePointParameterfvARB *instance, GLenum pname, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_PointParameterfvARB( GLenum pname, const GLfloat * params );

/*** PointParameteri ***/
struct instancePointParameteri {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLint param;
};
void DLM_APIENTRY crdlm_compile_PointParameteri( GLenum pname, GLint param );

/*** PointParameteriv ***/
struct instancePointParameteriv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum pname;
	GLint * param;
	GLint paramData[1];
};
int crdlm_pointers_PointParameteriv(struct instancePointParameteriv *instance, GLenum pname, const GLint * param);
void DLM_APIENTRY crdlm_compile_PointParameteriv( GLenum pname, const GLint * param );

/*** PointSize ***/
struct instancePointSize {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat size;
};
void DLM_APIENTRY crdlm_compile_PointSize( GLfloat size );

/*** PolygonMode ***/
struct instancePolygonMode {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum face;
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_PolygonMode( GLenum face, GLenum mode );

/*** PolygonOffset ***/
struct instancePolygonOffset {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat factor;
	GLfloat units;
};
void DLM_APIENTRY crdlm_compile_PolygonOffset( GLfloat factor, GLfloat units );

/*** PolygonStipple ***/
struct instancePolygonStipple {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLubyte * mask;
	GLubyte maskData[128];
};
void DLM_APIENTRY crdlm_compile_PolygonStipple( const GLubyte * mask );

/*** PopAttrib ***/
struct instancePopAttrib {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
};
void DLM_APIENTRY crdlm_compile_PopAttrib( void );

/*** PopClientAttrib ***/

/*** PopMatrix ***/
struct instancePopMatrix {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
};
void DLM_APIENTRY crdlm_compile_PopMatrix( void );

/*** PopName ***/
struct instancePopName {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
};
void DLM_APIENTRY crdlm_compile_PopName( void );

/*** PrioritizeTextures ***/
struct instancePrioritizeTextures {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLsizei n;
	GLuint * textures;
	GLclampf * priorities;
	GLvoid * data[1];
};
int crdlm_pointers_PrioritizeTextures(struct instancePrioritizeTextures *instance, GLsizei n, const GLuint * textures, const GLclampf * priorities);
void DLM_APIENTRY crdlm_compile_PrioritizeTextures( GLsizei n, const GLuint * textures, const GLclampf * priorities );

/*** ProgramEnvParameter4dARB ***/
struct instanceProgramEnvParameter4dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLdouble x;
	GLdouble y;
	GLdouble z;
	GLdouble w;
};
void DLM_APIENTRY crdlm_compile_ProgramEnvParameter4dARB( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );

/*** ProgramEnvParameter4dvARB ***/
struct instanceProgramEnvParameter4dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLdouble * params;
	GLdouble paramsData[4];
};
void DLM_APIENTRY crdlm_compile_ProgramEnvParameter4dvARB( GLenum target, GLuint index, const GLdouble * params );

/*** ProgramEnvParameter4fARB ***/
struct instanceProgramEnvParameter4fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLfloat x;
	GLfloat y;
	GLfloat z;
	GLfloat w;
};
void DLM_APIENTRY crdlm_compile_ProgramEnvParameter4fARB( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );

/*** ProgramEnvParameter4fvARB ***/
struct instanceProgramEnvParameter4fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLfloat * params;
	GLfloat paramsData[4];
};
void DLM_APIENTRY crdlm_compile_ProgramEnvParameter4fvARB( GLenum target, GLuint index, const GLfloat * params );

/*** ProgramLocalParameter4dARB ***/
struct instanceProgramLocalParameter4dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLdouble x;
	GLdouble y;
	GLdouble z;
	GLdouble w;
};
void DLM_APIENTRY crdlm_compile_ProgramLocalParameter4dARB( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );

/*** ProgramLocalParameter4dvARB ***/
struct instanceProgramLocalParameter4dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLdouble * params;
	GLdouble paramsData[4];
};
void DLM_APIENTRY crdlm_compile_ProgramLocalParameter4dvARB( GLenum target, GLuint index, const GLdouble * params );

/*** ProgramLocalParameter4fARB ***/
struct instanceProgramLocalParameter4fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLfloat x;
	GLfloat y;
	GLfloat z;
	GLfloat w;
};
void DLM_APIENTRY crdlm_compile_ProgramLocalParameter4fARB( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );

/*** ProgramLocalParameter4fvARB ***/
struct instanceProgramLocalParameter4fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLfloat * params;
	GLfloat paramsData[4];
};
void DLM_APIENTRY crdlm_compile_ProgramLocalParameter4fvARB( GLenum target, GLuint index, const GLfloat * params );

/*** ProgramNamedParameter4dNV ***/
struct instanceProgramNamedParameter4dNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint id;
	GLsizei len;
	GLubyte * name;
	GLdouble x;
	GLdouble y;
	GLdouble z;
	GLdouble w;
	GLubyte nameData[1];
};
int crdlm_pointers_ProgramNamedParameter4dNV(struct instanceProgramNamedParameter4dNV *instance, GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
void DLM_APIENTRY crdlm_compile_ProgramNamedParameter4dNV( GLuint id, GLsizei len, const GLubyte * name, GLdouble x, GLdouble y, GLdouble z, GLdouble w );

/*** ProgramNamedParameter4dvNV ***/
struct instanceProgramNamedParameter4dvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint id;
	GLsizei len;
	GLubyte * name;
	GLdouble * v;
	GLvoid * data[1];
};
int crdlm_pointers_ProgramNamedParameter4dvNV(struct instanceProgramNamedParameter4dvNV *instance, GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v);
void DLM_APIENTRY crdlm_compile_ProgramNamedParameter4dvNV( GLuint id, GLsizei len, const GLubyte * name, const GLdouble * v );

/*** ProgramNamedParameter4fNV ***/
struct instanceProgramNamedParameter4fNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint id;
	GLsizei len;
	GLubyte * name;
	GLfloat x;
	GLfloat y;
	GLfloat z;
	GLfloat w;
	GLubyte nameData[1];
};
int crdlm_pointers_ProgramNamedParameter4fNV(struct instanceProgramNamedParameter4fNV *instance, GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
void DLM_APIENTRY crdlm_compile_ProgramNamedParameter4fNV( GLuint id, GLsizei len, const GLubyte * name, GLfloat x, GLfloat y, GLfloat z, GLfloat w );

/*** ProgramNamedParameter4fvNV ***/
struct instanceProgramNamedParameter4fvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint id;
	GLsizei len;
	GLubyte * name;
	GLfloat * v;
	GLvoid * data[1];
};
int crdlm_pointers_ProgramNamedParameter4fvNV(struct instanceProgramNamedParameter4fvNV *instance, GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v);
void DLM_APIENTRY crdlm_compile_ProgramNamedParameter4fvNV( GLuint id, GLsizei len, const GLubyte * name, const GLfloat * v );

/*** ProgramParameter4dNV ***/
struct instanceProgramParameter4dNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLdouble x;
	GLdouble y;
	GLdouble z;
	GLdouble w;
};
void DLM_APIENTRY crdlm_compile_ProgramParameter4dNV( GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );

/*** ProgramParameter4dvNV ***/
struct instanceProgramParameter4dvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLdouble * params;
	GLdouble paramsData[4];
};
void DLM_APIENTRY crdlm_compile_ProgramParameter4dvNV( GLenum target, GLuint index, const GLdouble * params );

/*** ProgramParameter4fNV ***/
struct instanceProgramParameter4fNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLfloat x;
	GLfloat y;
	GLfloat z;
	GLfloat w;
};
void DLM_APIENTRY crdlm_compile_ProgramParameter4fNV( GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );

/*** ProgramParameter4fvNV ***/
struct instanceProgramParameter4fvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLfloat * params;
	GLfloat paramsData[4];
};
void DLM_APIENTRY crdlm_compile_ProgramParameter4fvNV( GLenum target, GLuint index, const GLfloat * params );

/*** ProgramParameters4dvNV ***/
struct instanceProgramParameters4dvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLuint num;
	GLdouble * params;
	GLdouble paramsData[4];
};
void DLM_APIENTRY crdlm_compile_ProgramParameters4dvNV( GLenum target, GLuint index, GLuint num, const GLdouble * params );

/*** ProgramParameters4fvNV ***/
struct instanceProgramParameters4fvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint index;
	GLuint num;
	GLfloat * params;
	GLfloat paramsData[4];
};
void DLM_APIENTRY crdlm_compile_ProgramParameters4fvNV( GLenum target, GLuint index, GLuint num, const GLfloat * params );

/*** ProgramStringARB ***/
struct instanceProgramStringARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLenum format;
	GLsizei len;
	GLvoid * string;
	int stringData[1];
};
int crdlm_pointers_ProgramStringARB(struct instanceProgramStringARB *instance, GLenum target, GLenum format, GLsizei len, const GLvoid * string);
void DLM_APIENTRY crdlm_compile_ProgramStringARB( GLenum target, GLenum format, GLsizei len, const GLvoid * string );

/*** PushAttrib ***/
struct instancePushAttrib {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLbitfield mask;
};
void DLM_APIENTRY crdlm_compile_PushAttrib( GLbitfield mask );

/*** PushClientAttrib ***/

/*** PushMatrix ***/
struct instancePushMatrix {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
};
void DLM_APIENTRY crdlm_compile_PushMatrix( void );

/*** PushName ***/
struct instancePushName {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint name;
};
void DLM_APIENTRY crdlm_compile_PushName( GLuint name );

/*** RasterPos2d ***/
struct instanceRasterPos2d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x;
	GLdouble y;
};
void DLM_APIENTRY crdlm_compile_RasterPos2d( GLdouble x, GLdouble y );

/*** RasterPos2dv ***/
struct instanceRasterPos2dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[2];
};
void DLM_APIENTRY crdlm_compile_RasterPos2dv( const GLdouble * v );

/*** RasterPos2f ***/
struct instanceRasterPos2f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x;
	GLfloat y;
};
void DLM_APIENTRY crdlm_compile_RasterPos2f( GLfloat x, GLfloat y );

/*** RasterPos2fv ***/
struct instanceRasterPos2fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[2];
};
void DLM_APIENTRY crdlm_compile_RasterPos2fv( const GLfloat * v );

/*** RasterPos2i ***/
struct instanceRasterPos2i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
};
void DLM_APIENTRY crdlm_compile_RasterPos2i( GLint x, GLint y );

/*** RasterPos2iv ***/
struct instanceRasterPos2iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[2];
};
void DLM_APIENTRY crdlm_compile_RasterPos2iv( const GLint * v );

/*** RasterPos2s ***/
struct instanceRasterPos2s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort x;
	GLshort y;
};
void DLM_APIENTRY crdlm_compile_RasterPos2s( GLshort x, GLshort y );

/*** RasterPos2sv ***/
struct instanceRasterPos2sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[2];
};
void DLM_APIENTRY crdlm_compile_RasterPos2sv( const GLshort * v );

/*** RasterPos3d ***/
struct instanceRasterPos3d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x;
	GLdouble y;
	GLdouble z;
};
void DLM_APIENTRY crdlm_compile_RasterPos3d( GLdouble x, GLdouble y, GLdouble z );

/*** RasterPos3dv ***/
struct instanceRasterPos3dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[3];
};
void DLM_APIENTRY crdlm_compile_RasterPos3dv( const GLdouble * v );

/*** RasterPos3f ***/
struct instanceRasterPos3f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x;
	GLfloat y;
	GLfloat z;
};
void DLM_APIENTRY crdlm_compile_RasterPos3f( GLfloat x, GLfloat y, GLfloat z );

/*** RasterPos3fv ***/
struct instanceRasterPos3fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[3];
};
void DLM_APIENTRY crdlm_compile_RasterPos3fv( const GLfloat * v );

/*** RasterPos3i ***/
struct instanceRasterPos3i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
	GLint z;
};
void DLM_APIENTRY crdlm_compile_RasterPos3i( GLint x, GLint y, GLint z );

/*** RasterPos3iv ***/
struct instanceRasterPos3iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[3];
};
void DLM_APIENTRY crdlm_compile_RasterPos3iv( const GLint * v );

/*** RasterPos3s ***/
struct instanceRasterPos3s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort x;
	GLshort y;
	GLshort z;
};
void DLM_APIENTRY crdlm_compile_RasterPos3s( GLshort x, GLshort y, GLshort z );

/*** RasterPos3sv ***/
struct instanceRasterPos3sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[3];
};
void DLM_APIENTRY crdlm_compile_RasterPos3sv( const GLshort * v );

/*** RasterPos4d ***/
struct instanceRasterPos4d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x;
	GLdouble y;
	GLdouble z;
	GLdouble w;
};
void DLM_APIENTRY crdlm_compile_RasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );

/*** RasterPos4dv ***/
struct instanceRasterPos4dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[4];
};
void DLM_APIENTRY crdlm_compile_RasterPos4dv( const GLdouble * v );

/*** RasterPos4f ***/
struct instanceRasterPos4f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x;
	GLfloat y;
	GLfloat z;
	GLfloat w;
};
void DLM_APIENTRY crdlm_compile_RasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );

/*** RasterPos4fv ***/
struct instanceRasterPos4fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[4];
};
void DLM_APIENTRY crdlm_compile_RasterPos4fv( const GLfloat * v );

/*** RasterPos4i ***/
struct instanceRasterPos4i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
	GLint z;
	GLint w;
};
void DLM_APIENTRY crdlm_compile_RasterPos4i( GLint x, GLint y, GLint z, GLint w );

/*** RasterPos4iv ***/
struct instanceRasterPos4iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[4];
};
void DLM_APIENTRY crdlm_compile_RasterPos4iv( const GLint * v );

/*** RasterPos4s ***/
struct instanceRasterPos4s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort x;
	GLshort y;
	GLshort z;
	GLshort w;
};
void DLM_APIENTRY crdlm_compile_RasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w );

/*** RasterPos4sv ***/
struct instanceRasterPos4sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[4];
};
void DLM_APIENTRY crdlm_compile_RasterPos4sv( const GLshort * v );

/*** ReadBuffer ***/
struct instanceReadBuffer {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_ReadBuffer( GLenum mode );

/*** ReadPixels ***/

/*** Rectd ***/
struct instanceRectd {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x1;
	GLdouble y1;
	GLdouble x2;
	GLdouble y2;
};
void DLM_APIENTRY crdlm_compile_Rectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );

/*** Rectdv ***/
struct instanceRectdv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v1;
	GLdouble * v2;
	GLdouble data[1];
};
int crdlm_pointers_Rectdv(struct instanceRectdv *instance, const GLdouble * v1, const GLdouble * v2);
void DLM_APIENTRY crdlm_compile_Rectdv( const GLdouble * v1, const GLdouble * v2 );

/*** Rectf ***/
struct instanceRectf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x1;
	GLfloat y1;
	GLfloat x2;
	GLfloat y2;
};
void DLM_APIENTRY crdlm_compile_Rectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );

/*** Rectfv ***/
struct instanceRectfv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v1;
	GLfloat * v2;
	GLfloat data[1];
};
int crdlm_pointers_Rectfv(struct instanceRectfv *instance, const GLfloat * v1, const GLfloat * v2);
void DLM_APIENTRY crdlm_compile_Rectfv( const GLfloat * v1, const GLfloat * v2 );

/*** Recti ***/
struct instanceRecti {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x1;
	GLint y1;
	GLint x2;
	GLint y2;
};
void DLM_APIENTRY crdlm_compile_Recti( GLint x1, GLint y1, GLint x2, GLint y2 );

/*** Rectiv ***/
struct instanceRectiv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v1;
	GLint * v2;
	GLint data[1];
};
int crdlm_pointers_Rectiv(struct instanceRectiv *instance, const GLint * v1, const GLint * v2);
void DLM_APIENTRY crdlm_compile_Rectiv( const GLint * v1, const GLint * v2 );

/*** Rects ***/
struct instanceRects {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort x1;
	GLshort y1;
	GLshort x2;
	GLshort y2;
};
void DLM_APIENTRY crdlm_compile_Rects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );

/*** Rectsv ***/
struct instanceRectsv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v1;
	GLshort * v2;
	GLshort data[1];
};
int crdlm_pointers_Rectsv(struct instanceRectsv *instance, const GLshort * v1, const GLshort * v2);
void DLM_APIENTRY crdlm_compile_Rectsv( const GLshort * v1, const GLshort * v2 );

/*** RenderMode ***/

/*** RequestResidentProgramsNV ***/
struct instanceRequestResidentProgramsNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLsizei n;
	GLuint * ids;
	GLuint idsData[1];
};
int crdlm_pointers_RequestResidentProgramsNV(struct instanceRequestResidentProgramsNV *instance, GLsizei n, const GLuint * ids);
void DLM_APIENTRY crdlm_compile_RequestResidentProgramsNV( GLsizei n, const GLuint * ids );

/*** Rotated ***/
struct instanceRotated {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble angle;
	GLdouble x;
	GLdouble y;
	GLdouble z;
};
void DLM_APIENTRY crdlm_compile_Rotated( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );

/*** Rotatef ***/
struct instanceRotatef {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat angle;
	GLfloat x;
	GLfloat y;
	GLfloat z;
};
void DLM_APIENTRY crdlm_compile_Rotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );

/*** SampleCoverageARB ***/
struct instanceSampleCoverageARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLclampf value;
	GLboolean invert;
};
void DLM_APIENTRY crdlm_compile_SampleCoverageARB( GLclampf value, GLboolean invert );

/*** Scaled ***/
struct instanceScaled {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x;
	GLdouble y;
	GLdouble z;
};
void DLM_APIENTRY crdlm_compile_Scaled( GLdouble x, GLdouble y, GLdouble z );

/*** Scalef ***/
struct instanceScalef {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x;
	GLfloat y;
	GLfloat z;
};
void DLM_APIENTRY crdlm_compile_Scalef( GLfloat x, GLfloat y, GLfloat z );

/*** Scissor ***/
struct instanceScissor {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
	GLsizei width;
	GLsizei height;
};
void DLM_APIENTRY crdlm_compile_Scissor( GLint x, GLint y, GLsizei width, GLsizei height );

/*** SecondaryColor3bEXT ***/
struct instanceSecondaryColor3bEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLbyte red;
	GLbyte green;
	GLbyte blue;
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3bEXT( GLbyte red, GLbyte green, GLbyte blue );

/*** SecondaryColor3bvEXT ***/
struct instanceSecondaryColor3bvEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLbyte * v;
	GLbyte vData[3];
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3bvEXT( const GLbyte * v );

/*** SecondaryColor3dEXT ***/
struct instanceSecondaryColor3dEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble red;
	GLdouble green;
	GLdouble blue;
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3dEXT( GLdouble red, GLdouble green, GLdouble blue );

/*** SecondaryColor3dvEXT ***/
struct instanceSecondaryColor3dvEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[3];
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3dvEXT( const GLdouble * v );

/*** SecondaryColor3fEXT ***/
struct instanceSecondaryColor3fEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat red;
	GLfloat green;
	GLfloat blue;
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3fEXT( GLfloat red, GLfloat green, GLfloat blue );

/*** SecondaryColor3fvEXT ***/
struct instanceSecondaryColor3fvEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[3];
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3fvEXT( const GLfloat * v );

/*** SecondaryColor3iEXT ***/
struct instanceSecondaryColor3iEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint red;
	GLint green;
	GLint blue;
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3iEXT( GLint red, GLint green, GLint blue );

/*** SecondaryColor3ivEXT ***/
struct instanceSecondaryColor3ivEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[3];
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3ivEXT( const GLint * v );

/*** SecondaryColor3sEXT ***/
struct instanceSecondaryColor3sEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort red;
	GLshort green;
	GLshort blue;
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3sEXT( GLshort red, GLshort green, GLshort blue );

/*** SecondaryColor3svEXT ***/
struct instanceSecondaryColor3svEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[3];
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3svEXT( const GLshort * v );

/*** SecondaryColor3ubEXT ***/
struct instanceSecondaryColor3ubEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLubyte red;
	GLubyte green;
	GLubyte blue;
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3ubEXT( GLubyte red, GLubyte green, GLubyte blue );

/*** SecondaryColor3ubvEXT ***/
struct instanceSecondaryColor3ubvEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLubyte * v;
	GLubyte vData[3];
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3ubvEXT( const GLubyte * v );

/*** SecondaryColor3uiEXT ***/
struct instanceSecondaryColor3uiEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint red;
	GLuint green;
	GLuint blue;
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3uiEXT( GLuint red, GLuint green, GLuint blue );

/*** SecondaryColor3uivEXT ***/
struct instanceSecondaryColor3uivEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint * v;
	GLuint vData[3];
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3uivEXT( const GLuint * v );

/*** SecondaryColor3usEXT ***/
struct instanceSecondaryColor3usEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLushort red;
	GLushort green;
	GLushort blue;
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3usEXT( GLushort red, GLushort green, GLushort blue );

/*** SecondaryColor3usvEXT ***/
struct instanceSecondaryColor3usvEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLushort * v;
	GLushort vData[3];
};
void DLM_APIENTRY crdlm_compile_SecondaryColor3usvEXT( const GLushort * v );

/*** SecondaryColorPointerEXT ***/

/*** SelectBuffer ***/

/*** SemaphoreCreateCR ***/

/*** SemaphoreDestroyCR ***/

/*** SemaphorePCR ***/

/*** SemaphoreVCR ***/

/*** SetFenceNV ***/
struct instanceSetFenceNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint fence;
	GLenum condition;
};
void DLM_APIENTRY crdlm_compile_SetFenceNV( GLuint fence, GLenum condition );

/*** ShadeModel ***/
struct instanceShadeModel {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum mode;
};
void DLM_APIENTRY crdlm_compile_ShadeModel( GLenum mode );

/*** StencilFunc ***/
struct instanceStencilFunc {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum func;
	GLint ref;
	GLuint mask;
};
void DLM_APIENTRY crdlm_compile_StencilFunc( GLenum func, GLint ref, GLuint mask );

/*** StencilMask ***/
struct instanceStencilMask {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint mask;
};
void DLM_APIENTRY crdlm_compile_StencilMask( GLuint mask );

/*** StencilOp ***/
struct instanceStencilOp {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum fail;
	GLenum zfail;
	GLenum zpass;
};
void DLM_APIENTRY crdlm_compile_StencilOp( GLenum fail, GLenum zfail, GLenum zpass );

/*** SwapBuffers ***/

/*** TestFenceNV ***/

/*** TexCoord1d ***/
struct instanceTexCoord1d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble s;
};
void DLM_APIENTRY crdlm_compile_TexCoord1d( GLdouble s );

/*** TexCoord1dv ***/
struct instanceTexCoord1dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[1];
};
void DLM_APIENTRY crdlm_compile_TexCoord1dv( const GLdouble * v );

/*** TexCoord1f ***/
struct instanceTexCoord1f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat s;
};
void DLM_APIENTRY crdlm_compile_TexCoord1f( GLfloat s );

/*** TexCoord1fv ***/
struct instanceTexCoord1fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[1];
};
void DLM_APIENTRY crdlm_compile_TexCoord1fv( const GLfloat * v );

/*** TexCoord1i ***/
struct instanceTexCoord1i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint s;
};
void DLM_APIENTRY crdlm_compile_TexCoord1i( GLint s );

/*** TexCoord1iv ***/
struct instanceTexCoord1iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[1];
};
void DLM_APIENTRY crdlm_compile_TexCoord1iv( const GLint * v );

/*** TexCoord1s ***/
struct instanceTexCoord1s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort s;
};
void DLM_APIENTRY crdlm_compile_TexCoord1s( GLshort s );

/*** TexCoord1sv ***/
struct instanceTexCoord1sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[1];
};
void DLM_APIENTRY crdlm_compile_TexCoord1sv( const GLshort * v );

/*** TexCoord2d ***/
struct instanceTexCoord2d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble s;
	GLdouble t;
};
void DLM_APIENTRY crdlm_compile_TexCoord2d( GLdouble s, GLdouble t );

/*** TexCoord2dv ***/
struct instanceTexCoord2dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[2];
};
void DLM_APIENTRY crdlm_compile_TexCoord2dv( const GLdouble * v );

/*** TexCoord2f ***/
struct instanceTexCoord2f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat s;
	GLfloat t;
};
void DLM_APIENTRY crdlm_compile_TexCoord2f( GLfloat s, GLfloat t );

/*** TexCoord2fv ***/
struct instanceTexCoord2fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[2];
};
void DLM_APIENTRY crdlm_compile_TexCoord2fv( const GLfloat * v );

/*** TexCoord2i ***/
struct instanceTexCoord2i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint s;
	GLint t;
};
void DLM_APIENTRY crdlm_compile_TexCoord2i( GLint s, GLint t );

/*** TexCoord2iv ***/
struct instanceTexCoord2iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[2];
};
void DLM_APIENTRY crdlm_compile_TexCoord2iv( const GLint * v );

/*** TexCoord2s ***/
struct instanceTexCoord2s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort s;
	GLshort t;
};
void DLM_APIENTRY crdlm_compile_TexCoord2s( GLshort s, GLshort t );

/*** TexCoord2sv ***/
struct instanceTexCoord2sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[2];
};
void DLM_APIENTRY crdlm_compile_TexCoord2sv( const GLshort * v );

/*** TexCoord3d ***/
struct instanceTexCoord3d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble s;
	GLdouble t;
	GLdouble r;
};
void DLM_APIENTRY crdlm_compile_TexCoord3d( GLdouble s, GLdouble t, GLdouble r );

/*** TexCoord3dv ***/
struct instanceTexCoord3dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[3];
};
void DLM_APIENTRY crdlm_compile_TexCoord3dv( const GLdouble * v );

/*** TexCoord3f ***/
struct instanceTexCoord3f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat s;
	GLfloat t;
	GLfloat r;
};
void DLM_APIENTRY crdlm_compile_TexCoord3f( GLfloat s, GLfloat t, GLfloat r );

/*** TexCoord3fv ***/
struct instanceTexCoord3fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[3];
};
void DLM_APIENTRY crdlm_compile_TexCoord3fv( const GLfloat * v );

/*** TexCoord3i ***/
struct instanceTexCoord3i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint s;
	GLint t;
	GLint r;
};
void DLM_APIENTRY crdlm_compile_TexCoord3i( GLint s, GLint t, GLint r );

/*** TexCoord3iv ***/
struct instanceTexCoord3iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[3];
};
void DLM_APIENTRY crdlm_compile_TexCoord3iv( const GLint * v );

/*** TexCoord3s ***/
struct instanceTexCoord3s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort s;
	GLshort t;
	GLshort r;
};
void DLM_APIENTRY crdlm_compile_TexCoord3s( GLshort s, GLshort t, GLshort r );

/*** TexCoord3sv ***/
struct instanceTexCoord3sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[3];
};
void DLM_APIENTRY crdlm_compile_TexCoord3sv( const GLshort * v );

/*** TexCoord4d ***/
struct instanceTexCoord4d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble s;
	GLdouble t;
	GLdouble r;
	GLdouble q;
};
void DLM_APIENTRY crdlm_compile_TexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q );

/*** TexCoord4dv ***/
struct instanceTexCoord4dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[4];
};
void DLM_APIENTRY crdlm_compile_TexCoord4dv( const GLdouble * v );

/*** TexCoord4f ***/
struct instanceTexCoord4f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat s;
	GLfloat t;
	GLfloat r;
	GLfloat q;
};
void DLM_APIENTRY crdlm_compile_TexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q );

/*** TexCoord4fv ***/
struct instanceTexCoord4fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[4];
};
void DLM_APIENTRY crdlm_compile_TexCoord4fv( const GLfloat * v );

/*** TexCoord4i ***/
struct instanceTexCoord4i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint s;
	GLint t;
	GLint r;
	GLint q;
};
void DLM_APIENTRY crdlm_compile_TexCoord4i( GLint s, GLint t, GLint r, GLint q );

/*** TexCoord4iv ***/
struct instanceTexCoord4iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[4];
};
void DLM_APIENTRY crdlm_compile_TexCoord4iv( const GLint * v );

/*** TexCoord4s ***/
struct instanceTexCoord4s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort s;
	GLshort t;
	GLshort r;
	GLshort q;
};
void DLM_APIENTRY crdlm_compile_TexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q );

/*** TexCoord4sv ***/
struct instanceTexCoord4sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[4];
};
void DLM_APIENTRY crdlm_compile_TexCoord4sv( const GLshort * v );

/*** TexCoordPointer ***/

/*** TexEnvf ***/
struct instanceTexEnvf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLenum pname;
	GLfloat param;
};
void DLM_APIENTRY crdlm_compile_TexEnvf( GLenum target, GLenum pname, GLfloat param );

/*** TexEnvfv ***/
struct instanceTexEnvfv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLenum pname;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_TexEnvfv(struct instanceTexEnvfv *instance, GLenum target, GLenum pname, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_TexEnvfv( GLenum target, GLenum pname, const GLfloat * params );

/*** TexEnvi ***/
struct instanceTexEnvi {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLenum pname;
	GLint param;
};
void DLM_APIENTRY crdlm_compile_TexEnvi( GLenum target, GLenum pname, GLint param );

/*** TexEnviv ***/
struct instanceTexEnviv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLenum pname;
	GLint * params;
	GLint paramsData[1];
};
int crdlm_pointers_TexEnviv(struct instanceTexEnviv *instance, GLenum target, GLenum pname, const GLint * params);
void DLM_APIENTRY crdlm_compile_TexEnviv( GLenum target, GLenum pname, const GLint * params );

/*** TexGend ***/
struct instanceTexGend {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum coord;
	GLenum pname;
	GLdouble param;
};
void DLM_APIENTRY crdlm_compile_TexGend( GLenum coord, GLenum pname, GLdouble param );

/*** TexGendv ***/
struct instanceTexGendv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum coord;
	GLenum pname;
	GLdouble * params;
	GLdouble paramsData[1];
};
int crdlm_pointers_TexGendv(struct instanceTexGendv *instance, GLenum coord, GLenum pname, const GLdouble * params);
void DLM_APIENTRY crdlm_compile_TexGendv( GLenum coord, GLenum pname, const GLdouble * params );

/*** TexGenf ***/
struct instanceTexGenf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum coord;
	GLenum pname;
	GLfloat param;
};
void DLM_APIENTRY crdlm_compile_TexGenf( GLenum coord, GLenum pname, GLfloat param );

/*** TexGenfv ***/
struct instanceTexGenfv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum coord;
	GLenum pname;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_TexGenfv(struct instanceTexGenfv *instance, GLenum coord, GLenum pname, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_TexGenfv( GLenum coord, GLenum pname, const GLfloat * params );

/*** TexGeni ***/
struct instanceTexGeni {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum coord;
	GLenum pname;
	GLint param;
};
void DLM_APIENTRY crdlm_compile_TexGeni( GLenum coord, GLenum pname, GLint param );

/*** TexGeniv ***/
struct instanceTexGeniv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum coord;
	GLenum pname;
	GLint * params;
	GLint paramsData[1];
};
int crdlm_pointers_TexGeniv(struct instanceTexGeniv *instance, GLenum coord, GLenum pname, const GLint * params);
void DLM_APIENTRY crdlm_compile_TexGeniv( GLenum coord, GLenum pname, const GLint * params );

/*** TexImage1D ***/
struct instanceTexImage1D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint internalFormat;
	GLsizei width;
	GLint border;
	GLenum format;
	GLenum type;
	GLvoid * pixels;
	int pixelsData[1];
};
int crdlm_pointers_TexImage1D(struct instanceTexImage1D *instance, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
int crdlm_checkpass_TexImage1D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void DLM_APIENTRY crdlm_compile_TexImage1D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid * pixels );

/*** TexImage2D ***/
struct instanceTexImage2D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint internalFormat;
	GLsizei width;
	GLsizei height;
	GLint border;
	GLenum format;
	GLenum type;
	GLvoid * pixels;
	int pixelsData[1];
};
int crdlm_pointers_TexImage2D(struct instanceTexImage2D *instance, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
int crdlm_checkpass_TexImage2D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void DLM_APIENTRY crdlm_compile_TexImage2D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid * pixels );

/*** TexImage3D ***/
struct instanceTexImage3D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint internalFormat;
	GLsizei width;
	GLsizei height;
	GLsizei depth;
	GLint border;
	GLenum format;
	GLenum type;
	GLvoid * pixels;
	int pixelsData[1];
};
int crdlm_pointers_TexImage3D(struct instanceTexImage3D *instance, GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
int crdlm_checkpass_TexImage3D(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void DLM_APIENTRY crdlm_compile_TexImage3D( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels );

/*** TexImage3DEXT ***/
struct instanceTexImage3DEXT {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLenum internalFormat;
	GLsizei width;
	GLsizei height;
	GLsizei depth;
	GLint border;
	GLenum format;
	GLenum type;
	GLvoid * pixels;
	int pixelsData[1];
};
int crdlm_pointers_TexImage3DEXT(struct instanceTexImage3DEXT *instance, GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
int crdlm_checkpass_TexImage3DEXT(GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels);
void DLM_APIENTRY crdlm_compile_TexImage3DEXT( GLenum target, GLint level, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid * pixels );

/*** TexParameterf ***/
struct instanceTexParameterf {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLenum pname;
	GLfloat param;
};
void DLM_APIENTRY crdlm_compile_TexParameterf( GLenum target, GLenum pname, GLfloat param );

/*** TexParameterfv ***/
struct instanceTexParameterfv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLenum pname;
	GLfloat * params;
	GLfloat paramsData[1];
};
int crdlm_pointers_TexParameterfv(struct instanceTexParameterfv *instance, GLenum target, GLenum pname, const GLfloat * params);
void DLM_APIENTRY crdlm_compile_TexParameterfv( GLenum target, GLenum pname, const GLfloat * params );

/*** TexParameteri ***/
struct instanceTexParameteri {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLenum pname;
	GLint param;
};
void DLM_APIENTRY crdlm_compile_TexParameteri( GLenum target, GLenum pname, GLint param );

/*** TexParameteriv ***/
struct instanceTexParameteriv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLenum pname;
	GLint * params;
	GLint paramsData[1];
};
int crdlm_pointers_TexParameteriv(struct instanceTexParameteriv *instance, GLenum target, GLenum pname, const GLint * params);
void DLM_APIENTRY crdlm_compile_TexParameteriv( GLenum target, GLenum pname, const GLint * params );

/*** TexSubImage1D ***/
struct instanceTexSubImage1D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint xoffset;
	GLsizei width;
	GLenum format;
	GLenum type;
	GLvoid * pixels;
	int pixelsData[1];
};
int crdlm_pointers_TexSubImage1D(struct instanceTexSubImage1D *instance, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels);
void DLM_APIENTRY crdlm_compile_TexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid * pixels );

/*** TexSubImage2D ***/
struct instanceTexSubImage2D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint xoffset;
	GLint yoffset;
	GLsizei width;
	GLsizei height;
	GLenum format;
	GLenum type;
	GLvoid * pixels;
	int pixelsData[1];
};
int crdlm_pointers_TexSubImage2D(struct instanceTexSubImage2D *instance, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels);
void DLM_APIENTRY crdlm_compile_TexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid * pixels );

/*** TexSubImage3D ***/
struct instanceTexSubImage3D {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLint level;
	GLint xoffset;
	GLint yoffset;
	GLint zoffset;
	GLsizei width;
	GLsizei height;
	GLsizei depth;
	GLenum format;
	GLenum type;
	GLvoid * pixels;
	int pixelsData[1];
};
int crdlm_pointers_TexSubImage3D(struct instanceTexSubImage3D *instance, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels);
void DLM_APIENTRY crdlm_compile_TexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid * pixels );

/*** TrackMatrixNV ***/
struct instanceTrackMatrixNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLenum target;
	GLuint address;
	GLenum matrix;
	GLenum transform;
};
void DLM_APIENTRY crdlm_compile_TrackMatrixNV( GLenum target, GLuint address, GLenum matrix, GLenum transform );

/*** Translated ***/
struct instanceTranslated {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x;
	GLdouble y;
	GLdouble z;
};
void DLM_APIENTRY crdlm_compile_Translated( GLdouble x, GLdouble y, GLdouble z );

/*** Translatef ***/
struct instanceTranslatef {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x;
	GLfloat y;
	GLfloat z;
};
void DLM_APIENTRY crdlm_compile_Translatef( GLfloat x, GLfloat y, GLfloat z );

/*** UnmapBufferARB ***/

/*** Vertex2d ***/
struct instanceVertex2d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x;
	GLdouble y;
};
void DLM_APIENTRY crdlm_compile_Vertex2d( GLdouble x, GLdouble y );

/*** Vertex2dv ***/
struct instanceVertex2dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[2];
};
void DLM_APIENTRY crdlm_compile_Vertex2dv( const GLdouble * v );

/*** Vertex2f ***/
struct instanceVertex2f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x;
	GLfloat y;
};
void DLM_APIENTRY crdlm_compile_Vertex2f( GLfloat x, GLfloat y );

/*** Vertex2fv ***/
struct instanceVertex2fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[2];
};
void DLM_APIENTRY crdlm_compile_Vertex2fv( const GLfloat * v );

/*** Vertex2i ***/
struct instanceVertex2i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
};
void DLM_APIENTRY crdlm_compile_Vertex2i( GLint x, GLint y );

/*** Vertex2iv ***/
struct instanceVertex2iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[2];
};
void DLM_APIENTRY crdlm_compile_Vertex2iv( const GLint * v );

/*** Vertex2s ***/
struct instanceVertex2s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort x;
	GLshort y;
};
void DLM_APIENTRY crdlm_compile_Vertex2s( GLshort x, GLshort y );

/*** Vertex2sv ***/
struct instanceVertex2sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[2];
};
void DLM_APIENTRY crdlm_compile_Vertex2sv( const GLshort * v );

/*** Vertex3d ***/
struct instanceVertex3d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x;
	GLdouble y;
	GLdouble z;
};
void DLM_APIENTRY crdlm_compile_Vertex3d( GLdouble x, GLdouble y, GLdouble z );

/*** Vertex3dv ***/
struct instanceVertex3dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[3];
};
void DLM_APIENTRY crdlm_compile_Vertex3dv( const GLdouble * v );

/*** Vertex3f ***/
struct instanceVertex3f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x;
	GLfloat y;
	GLfloat z;
};
void DLM_APIENTRY crdlm_compile_Vertex3f( GLfloat x, GLfloat y, GLfloat z );

/*** Vertex3fv ***/
struct instanceVertex3fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[3];
};
void DLM_APIENTRY crdlm_compile_Vertex3fv( const GLfloat * v );

/*** Vertex3i ***/
struct instanceVertex3i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
	GLint z;
};
void DLM_APIENTRY crdlm_compile_Vertex3i( GLint x, GLint y, GLint z );

/*** Vertex3iv ***/
struct instanceVertex3iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[3];
};
void DLM_APIENTRY crdlm_compile_Vertex3iv( const GLint * v );

/*** Vertex3s ***/
struct instanceVertex3s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort x;
	GLshort y;
	GLshort z;
};
void DLM_APIENTRY crdlm_compile_Vertex3s( GLshort x, GLshort y, GLshort z );

/*** Vertex3sv ***/
struct instanceVertex3sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[3];
};
void DLM_APIENTRY crdlm_compile_Vertex3sv( const GLshort * v );

/*** Vertex4d ***/
struct instanceVertex4d {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x;
	GLdouble y;
	GLdouble z;
	GLdouble w;
};
void DLM_APIENTRY crdlm_compile_Vertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );

/*** Vertex4dv ***/
struct instanceVertex4dv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[4];
};
void DLM_APIENTRY crdlm_compile_Vertex4dv( const GLdouble * v );

/*** Vertex4f ***/
struct instanceVertex4f {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x;
	GLfloat y;
	GLfloat z;
	GLfloat w;
};
void DLM_APIENTRY crdlm_compile_Vertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );

/*** Vertex4fv ***/
struct instanceVertex4fv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[4];
};
void DLM_APIENTRY crdlm_compile_Vertex4fv( const GLfloat * v );

/*** Vertex4i ***/
struct instanceVertex4i {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
	GLint z;
	GLint w;
};
void DLM_APIENTRY crdlm_compile_Vertex4i( GLint x, GLint y, GLint z, GLint w );

/*** Vertex4iv ***/
struct instanceVertex4iv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[4];
};
void DLM_APIENTRY crdlm_compile_Vertex4iv( const GLint * v );

/*** Vertex4s ***/
struct instanceVertex4s {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort x;
	GLshort y;
	GLshort z;
	GLshort w;
};
void DLM_APIENTRY crdlm_compile_Vertex4s( GLshort x, GLshort y, GLshort z, GLshort w );

/*** Vertex4sv ***/
struct instanceVertex4sv {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[4];
};
void DLM_APIENTRY crdlm_compile_Vertex4sv( const GLshort * v );

/*** VertexArrayRangeNV ***/

/*** VertexAttrib1dARB ***/
struct instanceVertexAttrib1dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLdouble x;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib1dARB( GLuint index, GLdouble x );

/*** VertexAttrib1dvARB ***/
struct instanceVertexAttrib1dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLdouble * v;
	GLdouble vData[1];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib1dvARB( GLuint index, const GLdouble * v );

/*** VertexAttrib1fARB ***/
struct instanceVertexAttrib1fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLfloat x;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib1fARB( GLuint index, GLfloat x );

/*** VertexAttrib1fvARB ***/
struct instanceVertexAttrib1fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLfloat * v;
	GLfloat vData[1];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib1fvARB( GLuint index, const GLfloat * v );

/*** VertexAttrib1sARB ***/
struct instanceVertexAttrib1sARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLshort x;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib1sARB( GLuint index, GLshort x );

/*** VertexAttrib1svARB ***/
struct instanceVertexAttrib1svARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLshort * v;
	GLshort vData[1];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib1svARB( GLuint index, const GLshort * v );

/*** VertexAttrib2dARB ***/
struct instanceVertexAttrib2dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLdouble x;
	GLdouble y;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib2dARB( GLuint index, GLdouble x, GLdouble y );

/*** VertexAttrib2dvARB ***/
struct instanceVertexAttrib2dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLdouble * v;
	GLdouble vData[2];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib2dvARB( GLuint index, const GLdouble * v );

/*** VertexAttrib2fARB ***/
struct instanceVertexAttrib2fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLfloat x;
	GLfloat y;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib2fARB( GLuint index, GLfloat x, GLfloat y );

/*** VertexAttrib2fvARB ***/
struct instanceVertexAttrib2fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLfloat * v;
	GLfloat vData[2];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib2fvARB( GLuint index, const GLfloat * v );

/*** VertexAttrib2sARB ***/
struct instanceVertexAttrib2sARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLshort x;
	GLshort y;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib2sARB( GLuint index, GLshort x, GLshort y );

/*** VertexAttrib2svARB ***/
struct instanceVertexAttrib2svARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLshort * v;
	GLshort vData[2];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib2svARB( GLuint index, const GLshort * v );

/*** VertexAttrib3dARB ***/
struct instanceVertexAttrib3dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLdouble x;
	GLdouble y;
	GLdouble z;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib3dARB( GLuint index, GLdouble x, GLdouble y, GLdouble z );

/*** VertexAttrib3dvARB ***/
struct instanceVertexAttrib3dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLdouble * v;
	GLdouble vData[3];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib3dvARB( GLuint index, const GLdouble * v );

/*** VertexAttrib3fARB ***/
struct instanceVertexAttrib3fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLfloat x;
	GLfloat y;
	GLfloat z;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib3fARB( GLuint index, GLfloat x, GLfloat y, GLfloat z );

/*** VertexAttrib3fvARB ***/
struct instanceVertexAttrib3fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLfloat * v;
	GLfloat vData[3];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib3fvARB( GLuint index, const GLfloat * v );

/*** VertexAttrib3sARB ***/
struct instanceVertexAttrib3sARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLshort x;
	GLshort y;
	GLshort z;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib3sARB( GLuint index, GLshort x, GLshort y, GLshort z );

/*** VertexAttrib3svARB ***/
struct instanceVertexAttrib3svARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLshort * v;
	GLshort vData[3];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib3svARB( GLuint index, const GLshort * v );

/*** VertexAttrib4NbvARB ***/
struct instanceVertexAttrib4NbvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLbyte * v;
	GLbyte vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4NbvARB( GLuint index, const GLbyte * v );

/*** VertexAttrib4NivARB ***/
struct instanceVertexAttrib4NivARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLint * v;
	GLint vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4NivARB( GLuint index, const GLint * v );

/*** VertexAttrib4NsvARB ***/
struct instanceVertexAttrib4NsvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLshort * v;
	GLshort vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4NsvARB( GLuint index, const GLshort * v );

/*** VertexAttrib4NubARB ***/
struct instanceVertexAttrib4NubARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLubyte x;
	GLubyte y;
	GLubyte z;
	GLubyte w;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4NubARB( GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w );

/*** VertexAttrib4NubvARB ***/
struct instanceVertexAttrib4NubvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLubyte * v;
	GLubyte vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4NubvARB( GLuint index, const GLubyte * v );

/*** VertexAttrib4NuivARB ***/
struct instanceVertexAttrib4NuivARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLuint * v;
	GLuint vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4NuivARB( GLuint index, const GLuint * v );

/*** VertexAttrib4NusvARB ***/
struct instanceVertexAttrib4NusvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLushort * v;
	GLushort vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4NusvARB( GLuint index, const GLushort * v );

/*** VertexAttrib4bvARB ***/
struct instanceVertexAttrib4bvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLbyte * v;
	GLbyte vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4bvARB( GLuint index, const GLbyte * v );

/*** VertexAttrib4dARB ***/
struct instanceVertexAttrib4dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLdouble x;
	GLdouble y;
	GLdouble z;
	GLdouble w;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4dARB( GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w );

/*** VertexAttrib4dvARB ***/
struct instanceVertexAttrib4dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLdouble * v;
	GLdouble vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4dvARB( GLuint index, const GLdouble * v );

/*** VertexAttrib4fARB ***/
struct instanceVertexAttrib4fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLfloat x;
	GLfloat y;
	GLfloat z;
	GLfloat w;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4fARB( GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w );

/*** VertexAttrib4fvARB ***/
struct instanceVertexAttrib4fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLfloat * v;
	GLfloat vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4fvARB( GLuint index, const GLfloat * v );

/*** VertexAttrib4ivARB ***/
struct instanceVertexAttrib4ivARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLint * v;
	GLint vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4ivARB( GLuint index, const GLint * v );

/*** VertexAttrib4sARB ***/
struct instanceVertexAttrib4sARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLshort x;
	GLshort y;
	GLshort z;
	GLshort w;
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4sARB( GLuint index, GLshort x, GLshort y, GLshort z, GLshort w );

/*** VertexAttrib4svARB ***/
struct instanceVertexAttrib4svARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLshort * v;
	GLshort vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4svARB( GLuint index, const GLshort * v );

/*** VertexAttrib4ubvARB ***/
struct instanceVertexAttrib4ubvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLubyte * v;
	GLubyte vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4ubvARB( GLuint index, const GLubyte * v );

/*** VertexAttrib4uivARB ***/
struct instanceVertexAttrib4uivARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLuint * v;
	GLuint vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4uivARB( GLuint index, const GLuint * v );

/*** VertexAttrib4usvARB ***/
struct instanceVertexAttrib4usvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLushort * v;
	GLushort vData[4];
};
void DLM_APIENTRY crdlm_compile_VertexAttrib4usvARB( GLuint index, const GLushort * v );

/*** VertexAttribPointerARB ***/

/*** VertexAttribPointerNV ***/

/*** VertexAttribs1dvNV ***/
struct instanceVertexAttribs1dvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLdouble * v;
	GLdouble vData[1];
};
int crdlm_pointers_VertexAttribs1dvNV(struct instanceVertexAttribs1dvNV *instance, GLuint index, GLsizei n, const GLdouble * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs1dvNV( GLuint index, GLsizei n, const GLdouble * v );

/*** VertexAttribs1fvNV ***/
struct instanceVertexAttribs1fvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLfloat * v;
	GLfloat vData[1];
};
int crdlm_pointers_VertexAttribs1fvNV(struct instanceVertexAttribs1fvNV *instance, GLuint index, GLsizei n, const GLfloat * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs1fvNV( GLuint index, GLsizei n, const GLfloat * v );

/*** VertexAttribs1svNV ***/
struct instanceVertexAttribs1svNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLshort * v;
	GLshort vData[1];
};
int crdlm_pointers_VertexAttribs1svNV(struct instanceVertexAttribs1svNV *instance, GLuint index, GLsizei n, const GLshort * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs1svNV( GLuint index, GLsizei n, const GLshort * v );

/*** VertexAttribs2dvNV ***/
struct instanceVertexAttribs2dvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLdouble * v;
	GLdouble vData[1];
};
int crdlm_pointers_VertexAttribs2dvNV(struct instanceVertexAttribs2dvNV *instance, GLuint index, GLsizei n, const GLdouble * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs2dvNV( GLuint index, GLsizei n, const GLdouble * v );

/*** VertexAttribs2fvNV ***/
struct instanceVertexAttribs2fvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLfloat * v;
	GLfloat vData[1];
};
int crdlm_pointers_VertexAttribs2fvNV(struct instanceVertexAttribs2fvNV *instance, GLuint index, GLsizei n, const GLfloat * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs2fvNV( GLuint index, GLsizei n, const GLfloat * v );

/*** VertexAttribs2svNV ***/
struct instanceVertexAttribs2svNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLshort * v;
	GLshort vData[1];
};
int crdlm_pointers_VertexAttribs2svNV(struct instanceVertexAttribs2svNV *instance, GLuint index, GLsizei n, const GLshort * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs2svNV( GLuint index, GLsizei n, const GLshort * v );

/*** VertexAttribs3dvNV ***/
struct instanceVertexAttribs3dvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLdouble * v;
	GLdouble vData[1];
};
int crdlm_pointers_VertexAttribs3dvNV(struct instanceVertexAttribs3dvNV *instance, GLuint index, GLsizei n, const GLdouble * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs3dvNV( GLuint index, GLsizei n, const GLdouble * v );

/*** VertexAttribs3fvNV ***/
struct instanceVertexAttribs3fvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLfloat * v;
	GLfloat vData[1];
};
int crdlm_pointers_VertexAttribs3fvNV(struct instanceVertexAttribs3fvNV *instance, GLuint index, GLsizei n, const GLfloat * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs3fvNV( GLuint index, GLsizei n, const GLfloat * v );

/*** VertexAttribs3svNV ***/
struct instanceVertexAttribs3svNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLshort * v;
	GLshort vData[1];
};
int crdlm_pointers_VertexAttribs3svNV(struct instanceVertexAttribs3svNV *instance, GLuint index, GLsizei n, const GLshort * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs3svNV( GLuint index, GLsizei n, const GLshort * v );

/*** VertexAttribs4dvNV ***/
struct instanceVertexAttribs4dvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLdouble * v;
	GLdouble vData[1];
};
int crdlm_pointers_VertexAttribs4dvNV(struct instanceVertexAttribs4dvNV *instance, GLuint index, GLsizei n, const GLdouble * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs4dvNV( GLuint index, GLsizei n, const GLdouble * v );

/*** VertexAttribs4fvNV ***/
struct instanceVertexAttribs4fvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLfloat * v;
	GLfloat vData[1];
};
int crdlm_pointers_VertexAttribs4fvNV(struct instanceVertexAttribs4fvNV *instance, GLuint index, GLsizei n, const GLfloat * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs4fvNV( GLuint index, GLsizei n, const GLfloat * v );

/*** VertexAttribs4svNV ***/
struct instanceVertexAttribs4svNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLshort * v;
	GLshort vData[1];
};
int crdlm_pointers_VertexAttribs4svNV(struct instanceVertexAttribs4svNV *instance, GLuint index, GLsizei n, const GLshort * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs4svNV( GLuint index, GLsizei n, const GLshort * v );

/*** VertexAttribs4ubvNV ***/
struct instanceVertexAttribs4ubvNV {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLuint index;
	GLsizei n;
	GLubyte * v;
	GLubyte vData[1];
};
int crdlm_pointers_VertexAttribs4ubvNV(struct instanceVertexAttribs4ubvNV *instance, GLuint index, GLsizei n, const GLubyte * v);
void DLM_APIENTRY crdlm_compile_VertexAttribs4ubvNV( GLuint index, GLsizei n, const GLubyte * v );

/*** VertexPointer ***/

/*** Viewport ***/
struct instanceViewport {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
	GLsizei width;
	GLsizei height;
};
void DLM_APIENTRY crdlm_compile_Viewport( GLint x, GLint y, GLsizei width, GLsizei height );

/*** WindowCreate ***/

/*** WindowDestroy ***/

/*** WindowPos2dARB ***/
struct instanceWindowPos2dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x;
	GLdouble y;
};
void DLM_APIENTRY crdlm_compile_WindowPos2dARB( GLdouble x, GLdouble y );

/*** WindowPos2dvARB ***/
struct instanceWindowPos2dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[2];
};
void DLM_APIENTRY crdlm_compile_WindowPos2dvARB( const GLdouble * v );

/*** WindowPos2fARB ***/
struct instanceWindowPos2fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x;
	GLfloat y;
};
void DLM_APIENTRY crdlm_compile_WindowPos2fARB( GLfloat x, GLfloat y );

/*** WindowPos2fvARB ***/
struct instanceWindowPos2fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[2];
};
void DLM_APIENTRY crdlm_compile_WindowPos2fvARB( const GLfloat * v );

/*** WindowPos2iARB ***/
struct instanceWindowPos2iARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
};
void DLM_APIENTRY crdlm_compile_WindowPos2iARB( GLint x, GLint y );

/*** WindowPos2ivARB ***/
struct instanceWindowPos2ivARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[2];
};
void DLM_APIENTRY crdlm_compile_WindowPos2ivARB( const GLint * v );

/*** WindowPos2sARB ***/
struct instanceWindowPos2sARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort x;
	GLshort y;
};
void DLM_APIENTRY crdlm_compile_WindowPos2sARB( GLshort x, GLshort y );

/*** WindowPos2svARB ***/
struct instanceWindowPos2svARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[2];
};
void DLM_APIENTRY crdlm_compile_WindowPos2svARB( const GLshort * v );

/*** WindowPos3dARB ***/
struct instanceWindowPos3dARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble x;
	GLdouble y;
	GLdouble z;
};
void DLM_APIENTRY crdlm_compile_WindowPos3dARB( GLdouble x, GLdouble y, GLdouble z );

/*** WindowPos3dvARB ***/
struct instanceWindowPos3dvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLdouble * v;
	GLdouble vData[3];
};
void DLM_APIENTRY crdlm_compile_WindowPos3dvARB( const GLdouble * v );

/*** WindowPos3fARB ***/
struct instanceWindowPos3fARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat x;
	GLfloat y;
	GLfloat z;
};
void DLM_APIENTRY crdlm_compile_WindowPos3fARB( GLfloat x, GLfloat y, GLfloat z );

/*** WindowPos3fvARB ***/
struct instanceWindowPos3fvARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLfloat * v;
	GLfloat vData[3];
};
void DLM_APIENTRY crdlm_compile_WindowPos3fvARB( const GLfloat * v );

/*** WindowPos3iARB ***/
struct instanceWindowPos3iARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint x;
	GLint y;
	GLint z;
};
void DLM_APIENTRY crdlm_compile_WindowPos3iARB( GLint x, GLint y, GLint z );

/*** WindowPos3ivARB ***/
struct instanceWindowPos3ivARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLint * v;
	GLint vData[3];
};
void DLM_APIENTRY crdlm_compile_WindowPos3ivARB( const GLint * v );

/*** WindowPos3sARB ***/
struct instanceWindowPos3sARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort x;
	GLshort y;
	GLshort z;
};
void DLM_APIENTRY crdlm_compile_WindowPos3sARB( GLshort x, GLshort y, GLshort z );

/*** WindowPos3svARB ***/
struct instanceWindowPos3svARB {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLshort * v;
	GLshort vData[3];
};
void DLM_APIENTRY crdlm_compile_WindowPos3svARB( const GLshort * v );

/*** WindowPosition ***/

/*** WindowShow ***/

/*** WindowSize ***/

/*** Writeback ***/

/*** ZPixCR ***/
struct instanceZPixCR {
	DLMInstanceList *next;
	void (DLM_APIENTRY *execute)(DLMInstanceList *instance, SPUDispatchTable *dispatchTable);
	GLsizei width;
	GLsizei height;
	GLenum format;
	GLenum type;
	GLenum ztype;
	GLint zparm;
	GLint length;
	GLvoid * pixels;
	int pixelsData[1];
};
int crdlm_pointers_ZPixCR(struct instanceZPixCR *instance, GLsizei width, GLsizei height, GLenum format, GLenum type, GLenum ztype, GLint zparm, GLint length, const GLvoid * pixels);
void DLM_APIENTRY crdlm_compile_ZPixCR( GLsizei width, GLsizei height, GLenum format, GLenum type, GLenum ztype, GLint zparm, GLint length, const GLvoid * pixels );
#endif
